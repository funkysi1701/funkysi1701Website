<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/android/</link><description>Recent content in Android on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 23 Jan 2019 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Pwned Pass Update</title><link>https://www.funkysi1701.com/posts/2019/pwned-pass-update/</link><pubDate>Wed, 23 Jan 2019 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2019/pwned-pass-update/</guid><description>&lt;p>Its been a while since I first released Pwned Pass so lets have a look at where we are now.&lt;/p>
&lt;p>We are very close to 500 Downloads from &lt;a href="https://play.google.com/store/apps/details?id=pwnedpasswords.pwnedpasswords" target="_blank" rel="noopener noreferrer">Google Play&lt;/a>
and we have recently smashed past 100 active installs, peaking at 116 and even now we are still over 100. I have had 9 reviews (6 x 5*, 2 x 1 * and a 4 *) which averages out at 4 *
&lt;img class="img-fluid" alt="Alt Text" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2019/01/image.png?w=662&amp;amp;ssl=1" loading="lazy"
/>
Over Christmas I released a UWP version that can be found in the &lt;a href="https://www.microsoft.com/store/apps/9NM2WHNZTNLT" target="_blank" rel="noopener noreferrer">Microsoft Store&lt;/a>
. This has currently had 9 downloads and even had a download to windows mobile (someone out there still likes the platform!)
&lt;img class="img-fluid" alt="Alt Text" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2019/01/image-1.png?w=662&amp;amp;ssl=1" loading="lazy"
/>
I have a fairly smooth deployment process using Azure DevOps. After every check in of code a build runs which compiles the UWP and Android versions. The build also increments the version numbers that is required to deploy to either of the app stores.&lt;/p>
&lt;p>Every successful build of the master branch will kick off a release to the Beta track of Google Play. If I am happy I then release to 10% of the Production track, which can then be increased to 100% (or halted). The release to Microsoft Store happens after the Beta track of Google Play. Only reason for this order is that there isn’t a beta area for UWP apps so I want to quickly test change on android before rolling out for windows.&lt;/p>
&lt;p>All these steps require confirmation by me before proceeding and often don’t get further than the beta track.&lt;/p>
&lt;p>A further development is that I have open sourced the source code to &lt;a href="">github&lt;/a>
do take a look if you are curious or want to contribute. With the purchase by Microsoft there are easy ways to connect github repositories to Azure DevOps. Once I create a Pull Request in github it creates a build in Azure DevOps and all the build and release steps can happen.&lt;/p>
&lt;p>I am still not 100% sure if I want to keep my bug and issue tracking in github or Azure DevOps as both have features for doing so.&lt;/p>
&lt;p>One future improvement I want to make is to automate the creation of screenshots. When I create a new feature and it gets checked in. I would like to automatically created screenshots of the key pages and submit them to the different app stores. Currently I am not sure if this is possible or how to go about it. I have some ideas to experiment with so we will see what I can do.&lt;/p></description></item><item><title>Android Development Options</title><link>https://www.funkysi1701.com/posts/2018/android-development-options/</link><pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/android-development-options/</guid><description>&lt;p>A friend asked me how to get started in Android Development and I thought I might have a go at answering that question here.&lt;/p>
&lt;p>I am by no means an expert in Android development, I do have an app in the play store so I know something.&lt;/p>
&lt;h4 id="manifest-file">Manifest File&lt;a class="anchor ms-1" href="#manifest-file">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>This is probably the easiest option and also doesn’t actually create an android app so I am not sure if it should be included in this list of not.&lt;/p>
&lt;p>If you have a website and you want to create an app for that you could just create a manifest file and add this to your website.&lt;/p>
&lt;p>Once your website has a manifest file, if you visit your website using a mobile phone or tablet you will get the option to add a shortcut to the home screen. You then have an app like experience in that you can click an icon to launch your website.&lt;/p>
&lt;p>A manifest file is a simple text file which specifies a few settings like the icon size, filename, what page loads when clicked and name of your “app”&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/web/fundamentals/web-app-manifest/" target="_blank" rel="noopener noreferrer">More information&lt;/a>
&lt;/p>
&lt;h4 id="visual-studio">Visual Studio&lt;a class="anchor ms-1" href="#visual-studio">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>This is the option I know most about as is what I have used.&lt;/p>
&lt;p>If you are familiar with Visual Studio you can use the Xamarin Forms software to create your app in C#. Xamarin Forms allows you to easily create cross platform apps that run on Android, IOS and windows phone. So far I have only experimented with Android but it should be relatively easy to extend my code to run on other platforms.&lt;/p>
&lt;p>Xamarin Forms allows you to write one a single codebase that can be compiled to run on the different platforms. Xamarin requires the use of XAML a XML like markup language for designing UI elements.&lt;/p>
&lt;p>More Information on &lt;a href="https://www.visualstudio.com/" target="_blank" rel="noopener noreferrer">Visual Studio&lt;/a>
, &lt;a href="https://www.xamarin.com/forms" target="_blank" rel="noopener noreferrer">Xamarin Forms&lt;/a>
&lt;/p>
&lt;h4 id="android-studio">Android Studio&lt;a class="anchor ms-1" href="#android-studio">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>I don’t know much about this option so do correct me if I don’t get the details correct.&lt;/p>
&lt;p>Android Studio can be downloaded from Google this allows you to create java code to run directly on an android device. From what I know this is fairly similar experience to Visual Studio but instead of writing your code in C# you use Android Studio and write it directly in java.&lt;/p>
&lt;p>&lt;a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener noreferrer">More information&lt;/a>
&lt;/p>
&lt;h4 id="cordova">Cordova&lt;a class="anchor ms-1" href="#cordova">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>Cordova allows you to use HTML, CSS and javascript to create cross platform apps. I have no idea why I haven’t heard of this technology until today as it sounds very flexible especially if you know a little bit of javascript.&lt;/p>
&lt;p>&lt;a href="https://cordova.apache.org/docs/en/latest/guide/overview/" target="_blank" rel="noopener noreferrer">More information&lt;/a>
&lt;/p>
&lt;p>To summarize there are lots of different options available to create an android app. What you choose depends on what you want to build, what language and experience you have and if your app needs to be cross platform.&lt;/p></description></item><item><title>New version of Pwned Pass</title><link>https://www.funkysi1701.com/posts/2018/new-version-pwned-pass/</link><pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/new-version-pwned-pass/</guid><description>&lt;p>&lt;img class="img-fluid" alt="Pwned Pass" src="https://lh3.googleusercontent.com/qZTLiWRfQwS7pT6gExLMTvU1pl8NtTU-kbeoSzD68p1D-EPY3Pg7cz2AN66QJpTTp1c=h900-rw" loading="lazy"
/>
A new version of Pwned Pass is available from &lt;a href="https://play.google.com/store/apps/details?id=pwnedpasswords.pwnedpasswords" target="_blank" rel="noopener noreferrer">Google Play&lt;/a>
.&lt;/p>
&lt;p>A couple of weeks ago &lt;a href="https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/" target="_blank" rel="noopener noreferrer">Troy Hunt&lt;/a>
released V2 of Pwned Pass onto his &lt;a href="https://haveibeenpwned.com/" target="_blank" rel="noopener noreferrer">haveibeenpwned&lt;/a>
website. There are now over half a billion passwords that have appeared in data breaches for you to search.&lt;/p>
&lt;p>This time Troy has included information about how many times a password has appeared in his data. So “password” returns a value of 3,303,003 so is a really, really bad choice of password to use. However the password “windows 10” has only appeared twice so is much better, however I would still recommend avoiding using it.&lt;/p>
&lt;p>One of the great things about the internet is that on the day of release I was tweeting Troy so I could get my android app updated to take advantage of these new features. I even helped him identify an issue with the documentation on his site. He has also kindly add a link to my app onto his website.&lt;/p>
&lt;p>That conversation and link has lead to a massive increase in app downloads. Before I was going steady on about 14 installs, now I have 86 active installs. I am not sure if this will increase anymore but if you are reading this because you downloaded my app, then thank you.&lt;/p>
&lt;p>My app has four main features:&lt;/p>
&lt;p>Password Check – this allows you to search a password and see if it has appeared in a data breach and also the number of times that password has appeared.&lt;/p>
&lt;p>Email Check – this allows you to search your email address and see which data breach it has been involved in.&lt;/p>
&lt;p>List of Data Breaches – this lists the data breaches from haveibeenpwned.com you can also sort by Date Added, Number of accounts and name.&lt;/p>
&lt;p>Calendar of Breaches – this shows a github like chart of what days breaches are added&lt;/p>
&lt;p>If you like my app do let me know. I have received a few ratings on google play it would be great to get a few more. If you want me to add a feature or have ideas of how I could improve it let me know as well.&lt;/p>
&lt;p>To download take a look at &lt;a href="https://play.google.com/store/apps/details?id=pwnedpasswords.pwnedpasswords" target="_blank" rel="noopener noreferrer">https://play.google.com/store/apps/details?id=pwnedpasswords.pwnedpasswords&lt;/a>
&lt;/p></description></item><item><title>Mobile App UI Testing</title><link>https://www.funkysi1701.com/posts/2018/mobile-app-ui-testing/</link><pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/mobile-app-ui-testing/</guid><description>&lt;p>Since I started creating an android app I have been writing simple UI tests.&lt;/p>
&lt;p>I have been taking advantage of the Visual Studio App Center which allows you to test against hundreds of different devices in the &lt;strong>Test Cloud&lt;/strong>.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Xamarin UI tests" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2018/01/01-newproject-vs.png?resize=300%2C182&amp;amp;ssl=1" loading="lazy"
/>
In order to write a UI test create a UI Test App, this makes use of the nuget package Xamarin UI Test. By default you will now have a test called AppLaunches which will take a screenshot of you app after it starts.&lt;/p>
&lt;p>You can now run this test against any device from Visual Studio assuming you have it physically plugged into your machine. However, how do you run against the Test Cloud?&lt;/p>
&lt;p>To run against the Test Cloud you need to first install node.js. Now you can install the appcenter cli with the following command.&lt;/p>
&lt;pre tabindex="0">&lt;code>**npm** install -g appcenter-cli
&lt;/code>&lt;/pre>&lt;p>To run the tests in the Test Cloud run the following command&lt;/p>
&lt;pre tabindex="0">&lt;code>**appcenter** test run uitest --app &amp;#34;&amp;lt;username&amp;gt;/&amp;lt;appname&amp;gt;&amp;#34; --devices &amp;#34;&amp;lt;username&amp;gt;/&amp;lt;deviceset&amp;gt;&amp;#34; --app-path _pathToFile.apk_ --test-series &amp;#34;master&amp;#34; --locale &amp;#34;en_US&amp;#34; --build-dir _pathToUITestBuildDir_
&lt;/code>&lt;/pre>&lt;p>where &lt;username> is your appcenter username, is the name of your app in appcenter and is the group of apps you have created in app center to test against.&lt;/p>
&lt;p>Look at device sets in the test section of the appcenter and click the new device set button. You can then search for any device you like and add it to a set, as I write this there are 244 devices you can test against.&lt;/p>
&lt;p>It is currently not possible within app center to run tests against a new build, however if you build your app in VSTS as well you can create build or release step that runs it. As the Visual Studio app center is still under development I wouldn’t be surprised if it is added at some point.&lt;/p>
&lt;p>In VSTS look for Mobile Center Test in the definitions and you can specify the same variables as specified in the command line above.&lt;/p>
&lt;p>Now how do you actually write a useful UI test? I mentioned above you get a default test which contains the following code, this takes a screenshot of your app. However you don’t have to include this when using the Test Cloud as screenshots are included for free.&lt;/p>
&lt;pre tabindex="0">&lt;code>app.Screenshot(&amp;#34;First screen.&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>Lets look at what else is included in app&lt;/p>
&lt;pre tabindex="0">&lt;code>app.Repl();
&lt;/code>&lt;/pre>&lt;p>This starts an interactive REPL (Read-Eval-Print-Loop) which lets you explore what is on screen in your app and pauses execution. I don’t include this in my tests, however I do make use of it to explore what is on screen and what tests I might make use of.&lt;/p>
&lt;pre tabindex="0">&lt;code>app.Tap(c =&amp;gt; c.Marked(&amp;#34;Button&amp;#34;));
&lt;/code>&lt;/pre>&lt;p>This taps an element on screen called Button. There is also a method called TapCoordinates which would allow you to click anywhere you like.&lt;/p>
&lt;pre tabindex="0">&lt;code>app.WaitForElement(c =&amp;gt; c.Marked(&amp;#34;View&amp;#34;));
&lt;/code>&lt;/pre>&lt;p>After clicking a button you are probably going to want to wait for the app to load extra data or a new screen. The WaitForElement waits for an element to appear on screen. There are also methods that wait a period of time or wait until an element no longer exists.&lt;/p>
&lt;p>These are the main methods I have used so far, however there is an extensive list including methods for scrolling, swiping, pinching and adjusting the volume buttons. So you should be able to test all manner of app functionality and if you make use of the Test Clouds will know which devices are causing problems.&lt;/p></description></item><item><title>Pwned Pass – Available from the Play Store</title><link>https://www.funkysi1701.com/posts/2017/pwned-pass-available-from-the-play-store/</link><pubDate>Mon, 14 Aug 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/pwned-pass-available-from-the-play-store/</guid><description>&lt;p>Pwned Pass is now available from the &lt;a href="https://play.google.com/store/apps/details?id=pwnedpasswords.pwnedpasswords" target="_blank" rel="noopener noreferrer">Google Play Store&lt;/a>
.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Pwned Pass" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/08/Screenshot_20170813-205152.png?resize=169%2C300&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Pwned Pass is a simple android app that allows you to type in a password and tells you if it has been used in a data breach.&lt;/p>
&lt;p>Troy Hunt of &lt;a href="https://haveibeenpwned.com/" target="_blank" rel="noopener noreferrer">Have I Been Pwned?&lt;/a>
recently added a new API to his website which allows you to search his extensive database of pwned passwords, 306 million of them. I have simply created a Android frontend to this API.&lt;/p>
&lt;p>The API itself takes a SHA1 hash of the password and either returns a HTTP 200 if the password is found or a HTTP 404 if the password does not exist in the HIBP database. For more details of how Troy Hunt created this check out his &lt;a href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/" target="_blank" rel="noopener noreferrer">blog post&lt;/a>
.&lt;/p>
&lt;p>My app simply generates a SHA1 hash of anything that is typed in and then passes this to Troy Hunt’s API. I then get the HTTP return code so I know if the password exists or not.&lt;/p>
&lt;p>It should be noted that: &lt;strong>Do not send any password you actively use to a third-party service – even this one!&lt;/strong> I don’t log anything that you type into my app and all I am then doing is passing a SHA1 hash over SSL to HIBP. However you shouldn’t trust my word alone.&lt;/p>
&lt;p>The app itself is written in Visual Studio with Xamarin Forms in a similar fashion to the app I talked about &lt;a href="https://www.funkysi1701.com/posts/android-app-development-and-the-visual-studio-mobile-centre">last week&lt;/a>
.&lt;/p>
&lt;p>As I am using Xamarin Forms there is the potential that I may develop iPhone or UWP versions of this code in the future. With that in mind I have made use of interfaces for the android specific parts of the code.&lt;/p>
&lt;p>I also make use of the &lt;a href="https://www.nuget.org/packages/modernhttpclient/" target="_blank" rel="noopener noreferrer">modernhttpclient&lt;/a>
nuget package due to problems I encountered with httpclient and SSL. This is due to limitations of what libraries are available in mono and what has been implemented, I suspect there are better ways to solve this but that is all part of the fun.&lt;/p>
&lt;p>Please do have a look at Pwned Pass and let me know what you think. Especially if it doesn’t work or throws errors. I would like to spend time making this app as good as I can make it.&lt;/p></description></item><item><title>Android App Development and the Visual Studio Mobile Centre</title><link>https://www.funkysi1701.com/posts/2017/android-app-development-and-the-visual-studio-mobile-centre/</link><pubDate>Mon, 07 Aug 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/android-app-development-and-the-visual-studio-mobile-centre/</guid><description>&lt;p>For the past week or so I have been playing around with Xamarin and creating an android app.&lt;/p>
&lt;p>Well I now have an app in the Google Play Store. Check out &lt;a href="https://play.google.com/store/apps/dev?id=6148298088834956775" target="_blank" rel="noopener noreferrer">https://play.google.com/store/apps/dev?id=6148298088834956775&lt;/a>
. &lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/08/Screenshot_20170806-190053.png?resize=169%2C300&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Before you rush and download the app I must warn you that it doesn’t do much yet. It displays some content that is on my website and there are a few links to allow sharing of content. I have some ideas to display content from my blog and allow sharing. I also have some other ideas for apps that might actually be useful to people that are not me. If you have ideas or feature requests do let me know.&lt;/p>
&lt;p>Ok how did I go about creating this app and getting it in the app store?&lt;/p>
&lt;p>Xamarin is now part of Visual Studio so step one is install all the Xamarin features to Visual Studio and build an app.&lt;/p>
&lt;p>Next I wanted to monitor my app. Now I know Application Insights doesn’t support apps so what tools are out there? HockeyApp is something I had heard of but they are in the process of being replaced with &lt;a href="https://appcenter.ms/apps" target="_blank" rel="noopener noreferrer">Visual Studio Mobile Centre&lt;/a>
.&lt;/p>
&lt;p>It was relatively easy to hook up my app to Visual Studio Mobile Centre. First install the required nuget packages. Then add using statements and the following line to your MainActivity.cs file (these instructions are available on the Mobile Centre)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Analytics;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Crashes;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Distribute;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Push;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>MobileCenter.Start(&lt;span style="color:#e6db74">&amp;#34;[Unique ID]&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">typeof&lt;/span>(Analytics), &lt;span style="color:#66d9ef">typeof&lt;/span>(Crashes), &lt;span style="color:#66d9ef">typeof&lt;/span>(Distribute), &lt;span style="color:#66d9ef">typeof&lt;/span>(Push));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can connect the Mobile Centre to your source code (VSTS in my case) and get it to run a build for every commit.&lt;/p>
&lt;p>One complexity of the build is that you need to supply a keystore file (basically a certificate to digitally sign your app). I found the best way to do this was to use Visual Studio to create the file.&lt;/p>
&lt;p>In VS2017 there is a option called Archive Manager under the tools menu. In here click the distribute button and select Ad-hoc. In the signing identity section you can create a keystore file. Enter a few details and a keystore file will be created in AppData\Local\Xamarin\Mono for Android\Keystore[keystore name][keystore name.keystore]&lt;/p>
&lt;p>Once you have added the keystore file to your build you can enable the distribute option. Now you will get an email after every build with a link to install your app.&lt;/p>
&lt;p>Every time your app crashes the details will be logged in the crashes section for you to explore and fix the issues.&lt;/p>
&lt;p>The Analytics section allows you to explore how your app is being used. You can also add Analytics.TrackEvent(&amp;ldquo;Feature X&amp;rdquo;) to measure the usage of different features.&lt;/p>
&lt;p>There are more things you can do which I will explore more at another time along with how to get your app into the Google Play Store.&lt;/p></description></item></channel></rss>