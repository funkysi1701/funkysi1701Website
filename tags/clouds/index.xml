<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clouds on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/clouds/</link><description>Recent content in Clouds on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 04 Aug 2016 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/clouds/index.xml" rel="self" type="application/rss+xml"/><item><title>Amazon Web Services Pt 2</title><link>https://www.funkysi1701.com/posts/2016/amazon-web-services-pt-2/</link><pubDate>Thu, 04 Aug 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/amazon-web-services-pt-2/</guid><description>&lt;p>Last time I started looking at Amazon Web Services and how it differed from Azure. I am going to continue looking at what it can do.&lt;/p>
&lt;h2 id="virtual-machines">Virtual Machines&lt;a class="anchor ms-1" href="#virtual-machines">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>Lets look at what you can do with Virtual Machines. I selected to create a new Virtual Machine (or as AWS calls them an EC2 Instance)&lt;/p>
&lt;p>First you choose a name for your VM and then the OS that runs on it. There are 5 main OSes to choose from Windows Server, Amazon Linux and a selection of the most common Linux flavours.&lt;/p>
&lt;p>You can then download a certificate to secure your VM.&lt;/p>
&lt;p>Like Azure, AWS takes a few moments to create your VM. While I wait I can see that AWS has configured a firewall so only my current IP can connect to it.&lt;/p>
&lt;p>Once the VM is ready you can download an RDP file. However to get the login details you need to decrypt the password using the certificate you downloaded when you created the VM.&lt;/p>
&lt;p>It is interesting to compare the difference in security between Azure and AWS. Azure allows the resetting of passwords of VMs directly from its console, however I suspect that in AWS if you loose your certificate (AWS states they don’t keep a copy of this) you would have to recreate your VM.&lt;/p>
&lt;p>Like with the Websites the default name of the VM is much less user-friendly than what you get from Azure. However I suspect there are other options I haven’t spotted that may customise these.&lt;/p>
&lt;h2 id="azure-portal-vs-aws-console">Azure Portal vs AWS Console&lt;a class="anchor ms-1" href="#azure-portal-vs-aws-console">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>I really like the Azure Portal. It feels like something that has been designed so you can easily access all the options for a specific Azure feature.&lt;/p>
&lt;p>The AWS Console probably has all the same options as with Azure however I don’t think it looks half as good, and will take me a while looking through menus to find the equivalent options. Part of this is due to my unfamiliarity with AWS, so will get easier with time.&lt;/p></description></item><item><title>Amazon Web Services</title><link>https://www.funkysi1701.com/posts/2016/amazon-web-services/</link><pubDate>Thu, 21 Jul 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/amazon-web-services/</guid><description>&lt;p>I am a big fan of Azure but I know zero about its biggest rival – Amazon Web Services or AWS.&lt;/p>
&lt;p>So lets sign up for a free trial and see what it can do. &lt;img class="img-fluid" alt="Amazon Web Services" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2016/07/aws-300x169.png?resize=300%2C169" loading="lazy"
/>
&lt;/p>
&lt;p>The AWS free trial is available from &lt;a href="https://aws.amazon.com/free/" target="_blank" rel="noopener noreferrer">https://aws.amazon.com/free/&lt;/a>
and lasts for 12 months. From memory I think the Azure free trial lasted only one month.&lt;/p>
&lt;p>To start you need to login with your amazon account and create an AWS account. This requires your name and address and your payment info (you will only get billed if use services not covered by your free trial).&lt;/p>
&lt;p>Interestingly AWS requires you to verify your identity via an automated phone call. (I don’t recall doing anything like this for Azure but please correct me if I am wrong.)&lt;/p>
&lt;p>Once you are logged in you get a series of links displaying all the different services that are available. First impression is this is a simpler view to Azure’s portal with a similar amount of services. At the top right is an option to select which region you want to use, in Azure I use North Europe and West Europe, AWS has Ireland and Frankfurt.&lt;/p>
&lt;h2 id="create-a-web-app">Create a Web App&lt;a class="anchor ms-1" href="#create-a-web-app">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>First thing to try is setting up a website. I selected create a web app and I get a page asking me for its basic details (very similar to Azure, however AWS asked what language your code is written in, Azure handles all of these) AWS websites appear to support a host of different options similar to Azure.&lt;/p>
&lt;p>The actual creation of your website takes a few moments (like on Azure). However the default URL for websites is similar to &lt;a href="http://test.vjbbimyv7w.eu-central-1.elasticbeanstalk.com/" target="_blank" rel="noopener noreferrer">http://test.vjbbimyv7w.eu-central-1.elasticbeanstalk.com/&lt;/a>
which is not quite as nice as the Azure equivalent &lt;a href="http://test.azurewebsites.net" target="_blank" rel="noopener noreferrer">http://test.azurewebsites.net&lt;/a>
&lt;/p>
&lt;p>Azure has a host of command lines available via powershell. AWS has a similar command line interface called AWS CLI, including the option to deploy from git to your website.&lt;/p>
&lt;p>AWS Toolkit for Visual Studio is an extension that allows for the publishing of websites to AWS. (Just like you can publish to Azure)&lt;/p>
&lt;p>As I learn more about AWS I will continue to blog about it. &lt;a href="https://www.funkysi1701.com/2016/08/04/amazon-web-services-pt-2/">Amazon Web Services Pt 2&lt;/a>
&lt;/p></description></item><item><title>Copying settings to an Azure Website</title><link>https://www.funkysi1701.com/posts/2015/copying-settings-to-an-azure-website/</link><pubDate>Thu, 01 Oct 2015 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2015/copying-settings-to-an-azure-website/</guid><description>&lt;p>The Software as a Service (SaaS) website that I work on has been sold to lots of clients now. Which is great news.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2015/09/2275.app-1.png?w=550&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>However the more Azure websites we have, the more websites we have to administer, especially if like us you take advantage of Traffic Manager which requires multiple website in different regions. Azure has some great options for making this administration easier. One job is adding all the settings onto the Azure portal, so far I have been manually adding these, but a quicker way is to use powershell.&lt;/p>
&lt;h2 id="powershell">PowerShell&lt;a class="anchor ms-1" href="#powershell">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>PowerShell is everywhere these days. You can use it to control Servers, Active Directory and Exchange. So it is no surprise that you can use it to control Azure.&lt;/p>
&lt;p>Open a powershell window and run the following command.&lt;/p>
&lt;pre tabindex="0">&lt;code>Get-AzurePublishSettingsFile
&lt;/code>&lt;/pre>&lt;p>This command opens an IE window which you can login to Azure and download a file which contains settings that Azure can use. Save the *.publishsettings file and run the following command.&lt;/p>
&lt;pre tabindex="0">&lt;code>Import-AzurePublishSettingsFile &amp;#34;C:\MyPublishSettings\mysubscriptions.publishsettings&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This imports your Azure settings so that PowerShell can do clever things.&lt;/p>
&lt;pre tabindex="0">&lt;code>Select-AzureSubscription -Default &amp;#34;mysubscription&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This selects which of your Azure subscriptions to use. Now run the following to import settings into PowerShell.&lt;/p>
&lt;pre tabindex="0">&lt;code>$s = @{&amp;#34;DebugEmailAccount&amp;#34;=&amp;#34;test@example.com&amp;#34;;&amp;#34;SiteWarningBannerText&amp;#34;=&amp;#34;&amp;#34;}
&lt;/code>&lt;/pre>&lt;p>And finally run the following to import this settings into the Azure website you specified.&lt;/p>
&lt;pre tabindex="0">&lt;code>Set-AzureWebsite azure-websitename -AppSettings $s
&lt;/code>&lt;/pre>&lt;p>Sounds easy doesn’t it. Well it is. The hardest part is getting the settings in the correct format to be imported but this is only string manipulation.&lt;/p>
&lt;p>For my project I already have a build script which populates a settings.config file with all these settings, so I have just duplicated this to create a settings.config.importtoAzure file. Next time I have a website to create, I can create it on Azure and run the above script, pasting in the settings file that my build has already produced for me.&lt;/p>
&lt;p>This only scratches the surface of what you can do with Azure and PowerShell, hopefully I will do far more in the future.&lt;/p></description></item></channel></rss>