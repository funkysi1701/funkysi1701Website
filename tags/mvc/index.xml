<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MVC on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/mvc/</link><description>Recent content in MVC on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 20 Mar 2017 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/mvc/index.xml" rel="self" type="application/rss+xml"/><item><title>SOLID and other programming terms</title><link>https://www.funkysi1701.com/posts/2017/solid-programming-terms/</link><pubDate>Mon, 20 Mar 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/solid-programming-terms/</guid><description>&lt;p>This week I have been looking at improving my understanding of a few programming terms, like SOLID and I will try and define them so I can look back here when I get confused.&lt;/p>
&lt;h3 id="mvc">MVC&lt;a class="anchor ms-1" href="#mvc">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>I have previously blogged about &lt;a href="https://www.funkysi1701.com/2016/03/17/model-view-controller-mvc/">MVC&lt;/a>
, but my understanding was not 100% correct so I will refine this here.&lt;/p>
&lt;p>&lt;strong>Model&lt;/strong> – Now this is where my understanding was not quite correct. I thought the model was the actual source data, eg an XML file, SQL database etc. The model is the business logic so this is a processed version of the source data. MVC does not care where data is stored it can be flat files, SQL, XML or anything really.&lt;/p>
&lt;p>&lt;strong>View&lt;/strong> – This displays data to the user and typically is the HTML/CSS markup. Only display related logic would get included in the view.&lt;/p>
&lt;p>&lt;strong>Controller&lt;/strong> – This is another place I had got a bit confused. I had thought all the logic lived here. This is incorrect controllers are only concerned with getting data between Model and View.&lt;/p>
&lt;h3 id="solid">SOLID&lt;a class="anchor ms-1" href="#solid">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>SOLID are five principles of object oriented programming and design.&lt;/p>
&lt;p>&lt;strong>S&lt;/strong> is for Single Responsibility Principle. A class or piece of code should be responsible for doing one thing.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/SingleResponsibilityPrinciple2_71060858.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>O&lt;/strong> is for Open/Closed Principle. Code should be open for extensions but closed for modifications. Often this refers to the way you can implement an interface and add extra functionality.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/ocp.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>L&lt;/strong> is for Liskov Substitution Principle. Objects in a program can be replaced with subtypes of that object with out changing functionality.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/LiskovSubtitutionPrinciple_52BB5162.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>I&lt;/strong> is for Interface Segregation Principle. Large interfaces should be split down into small interfaces so that clients only know about methods that are of interest.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/isp.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>D&lt;/strong> is for Dependency Inversion Principle. High and Low level modules should depend on abstractions.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/dip.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>I need to look into SOLID some more but here are some &lt;a href="https://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp" target="_blank" rel="noopener noreferrer">examples&lt;/a>
.&lt;/p>
&lt;h3 id="dry">DRY&lt;a class="anchor ms-1" href="#dry">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>DRY is simply Don’t Repeat Yourself. It is often easy to spot when a function call will help you not have to use the same bit of code in different places. I am often spotting places where I can put this into action.&lt;/p></description></item><item><title>Exchange Web Services</title><link>https://www.funkysi1701.com/posts/2016/exchange-web-services/</link><pubDate>Thu, 21 Apr 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/exchange-web-services/</guid><description>&lt;p>Where I work we use a really old fashioned way of recording where in the country employees are: Excel!&lt;/p>
&lt;p>For years I have been trying to persuade staff to use calendars in Exchange. Outlook is great for looking at one or two people’s calendars at once but quickly gets unmanageable for looking at ten or more peoples availability.&lt;/p>
&lt;p>Recently I have started looking into how easy it is to query this information to give a custom view.&lt;/p>
&lt;p>Microsoft provide an API to query exchange information called Exchange Web Services or EWS. I have only used EWS with my Exchange 2010 setup, but the documentation mentions working with Exchange 2007 and older or Exchange online.&lt;/p>
&lt;p>Here are the basics of what I have tried. Fire up Visual Studio and from nuget install EWS.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Install-Package Microsoft.Exchange.WebServices
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I started off with a simple Console App to see how it all worked, and then extended it to a MVC website. I found querying exchange directly was slow, but it is easy enough to cache information in a database.&lt;/p>
&lt;p>To start you need to create an Exchange Service object, by specifying the version of Exchange you are using.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>ExchangeService service = &lt;span style="color:#66d9ef">new&lt;/span> ExchangeService(ExchangeVersion.Exchange2010);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next you need to pass the URL you are using to access Exchange.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>service.Url = &lt;span style="color:#66d9ef">new&lt;/span> Uri(&lt;span style="color:#e6db74">&amp;#34;mail.example.com&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To access information from exchange you need to pass some Exchange credentials, ideally a username and password that has access to view all the calendars you want to look at.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>service.Credentials = &lt;span style="color:#66d9ef">new&lt;/span> WebCredentials(&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next pass the email address of the user who owns the calendar you want to look at.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>service.ImpersonatedUserId = &lt;span style="color:#66d9ef">new&lt;/span> ImpersonatedUserId(ConnectingIdType.SmtpAddress, &lt;span style="color:#e6db74">&amp;#34;me@example.com&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>My particular exchange server has a self signed SSL certificate which is not going to be trusted by remote clients. The following line ignores this validation check and makes my program connect.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) =&amp;gt; &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we have connected to exchange we just need a few lines to look for events in the calendars.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Initialize the calendar folder object with only the folder ID.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CalendarFolder calendar = CalendarFolder.Bind(service, WellKnownFolderName.Calendar, &lt;span style="color:#66d9ef">new&lt;/span> PropertySet());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Set the start and end time and number of appointments to retrieve.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CalendarView cView = &lt;span style="color:#66d9ef">new&lt;/span> CalendarView(startDate, endDate);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Limit the properties returned to the appointment&amp;#39;s subject, start time, and end time.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cView.PropertySet = &lt;span style="color:#66d9ef">new&lt;/span> PropertySet(AppointmentSchema.Subject, AppointmentSchema.Start, AppointmentSchema.End);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Retrieve a collection of appointments by using the calendar view.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FindItemsResults&amp;lt;Appointment&amp;gt; appointments = calendar.FindAppointments(cView);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that you have an appointments object you can loop through each element with a foreach loop. In my case I assign each elements Subject to a variable, which I can then do what I like with (display in a console window, save to a database, display in an MVC website.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (Appointment a &lt;span style="color:#66d9ef">in&lt;/span> appointments)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (a.Subject != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subject += a.Subject.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>My website queries a SQL database which I can easily populate with a console app that runs at regular intervals throughout the day.&lt;/p>
&lt;p>There is a lot more I want to do with this project as this is only the basics of what you can do with Exchange Web Services. So expect more blog posts on this subject as I expand its functionality and learn new ways of doing things.&lt;/p></description></item></channel></rss>