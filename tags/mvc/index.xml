<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MVC on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/mvc/</link><description>Recent content in MVC on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 20 Mar 2017 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/mvc/index.xml" rel="self" type="application/rss+xml"/><item><title>SOLID and other programming terms</title><link>https://www.funkysi1701.com/posts/2017/solid-programming-terms/</link><pubDate>Mon, 20 Mar 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/solid-programming-terms/</guid><description>&lt;p>This week I have been looking at improving my understanding of a few programming terms, like SOLID and I will try and define them so I can look back here when I get confused.&lt;/p>
&lt;h3 id="mvc">MVC&lt;a class="anchor ms-1" href="#mvc">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>I have previously blogged about &lt;a href="https://www.funkysi1701.com/2016/03/17/model-view-controller-mvc/">MVC&lt;/a>
, but my understanding was not 100% correct so I will refine this here.
&lt;strong>Model&lt;/strong> – Now this is where my understanding was not quite correct. I thought the model was the actual source data, eg an XML file, SQL database etc. The model is the business logic so this is a processed version of the source data. MVC does not care where data is stored it can be flat files, SQL, XML or anything really.
&lt;strong>View&lt;/strong> – This displays data to the user and typically is the HTML/CSS markup. Only display related logic would get included in the view.
&lt;strong>Controller&lt;/strong> – This is another place I had got a bit confused. I had thought all the logic lived here. This is incorrect controllers are only concerned with getting data between Model and View.&lt;/p>
&lt;h3 id="solid">SOLID&lt;a class="anchor ms-1" href="#solid">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>SOLID are five principles of object oriented programming and design.&lt;/p>
&lt;p>&lt;strong>S&lt;/strong> is for Single Responsibility Principle. A class or piece of code should be responsible for doing one thing.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/SingleResponsibilityPrinciple2_71060858.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>O&lt;/strong> is for Open/Closed Principle. Code should be open for extensions but closed for modifications. Often this refers to the way you can implement an interface and add extra functionality.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/ocp.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>L&lt;/strong> is for Liskov Substitution Principle. Objects in a program can be replaced with subtypes of that object with out changing functionality.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/LiskovSubtitutionPrinciple_52BB5162.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>I&lt;/strong> is for Interface Segregation Principle. Large interfaces should be split down into small interfaces so that clients only know about methods that are of interest.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/isp.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>&lt;strong>D&lt;/strong> is for Dependency Inversion Principle. High and Low level modules should depend on abstractions.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/dip.jpg?resize=300%2C240&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>I need to look into SOLID some more but here are some &lt;a href="https://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp" target="_blank" rel="noopener noreferrer">examples&lt;/a>
.&lt;/p>
&lt;h3 id="dry">DRY&lt;a class="anchor ms-1" href="#dry">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>DRY is simply Don’t Repeat Yourself. It is often easy to spot when a function call will help you not have to use the same bit of code in different places. I am often spotting places where I can put this into action.&lt;/p></description></item></channel></rss>