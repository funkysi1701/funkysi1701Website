<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BadDesign on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/baddesign/</link><description>Recent content in BadDesign on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 31 Oct 2017 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/baddesign/index.xml" rel="self" type="application/rss+xml"/><item><title>Interfaces are cool!</title><link>https://www.funkysi1701.com/posts/2017/interfaces-are-cool/</link><pubDate>Tue, 31 Oct 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/interfaces-are-cool/</guid><description>&lt;p>A while back I &lt;a href="https://www.funkysi1701.com/posts/interfaces/">blogged&lt;/a>
about learning about interfaces as I didn’t really understand the value of them. I do now.&lt;/p>
&lt;p>I created an application that used interfaces so I could learn how it worked. I created a Logger Interface and created multiple classes that implemented that interface so I could swap out the different implementations easily. I created a SQL Logger and a File Logger and my code could be written and be completely unaware of which implementation it was using.&lt;/p>
&lt;p>This application uses SQL Azure and so I have a monthly bill to pay. Wouldn’t it be cool if I could reduce this bill? How about using the cheaper table storage instead?&lt;/p>
&lt;p>&lt;strong>Easy!&lt;/strong>&lt;/p>
&lt;p>Create a new class that implements my interface and all I need to do is write the three methods defined in my interface and I can swap from SQL Azure to table storage.&lt;/p>
&lt;p>Another benefit to interfaces is testing. Say I have an interface called inotification for sending notifications, I can have several implementations of this email, twitter, slack etc&lt;/p>
&lt;p>None of these implementations should be used in unit tests, as you don’t want a tweet being sent every time you run your tests. Why not create an implementation that simply returns something for each method call and doesn’t actually do anything. I can then run my tests with my fake implementation which tests my code logic but not the implementation I have chosen (this can be tested later on with integration tests or user testing if required).&lt;/p>
&lt;p>This is pretty much all I have to say about interfaces. I just like how I can swap different implementations.&lt;/p>
&lt;p>It does take a bit of work to get the interface setup. I found that when writing the second implementation the interface would need to change slightly, mostly as it was badly designed to begin with. I think for beginners there may be some value to writing multiple implementations of an interface so you can be sure your interface is good, however I am sure with experience this will not be required.&lt;/p></description></item></channel></rss>