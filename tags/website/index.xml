<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Website on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/website/</link><description>Recent content in Website on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 25 Jan 2022 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/website/index.xml" rel="self" type="application/rss+xml"/><item><title>Why do I have a website?</title><link>https://www.funkysi1701.com/posts/2022/why-do-i-have-a-website/</link><pubDate>Tue, 25 Jan 2022 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2022/why-do-i-have-a-website/</guid><description>&lt;p>Is it to share my ideas? Is it to learn new technologies and techniques? Is it to create a following? Is it to educate others? Is it to build some kind of service? Is it some combination of all of these.&lt;/p>
&lt;h2 id="history">History&lt;a class="anchor ms-1" href="#history">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>Back when the web was young and I was first learning HTML. I hand crafted web pages, adding photos I had taken with captions. If I needed a new page I just added a new html page and linked to it from another page.&lt;/p>
&lt;p>As time went on I started to learn mysql and php and my website became a hand crafted php nightmare. I also applied what I learned to help my father run the website for his camera club.&lt;/p>
&lt;p>At some point I started playing with WordPress. I have had various WordPress websites or blogs over the years. WordPress is very powerful you can do so many things, install so many plugins. WordPress runs on php and mysql and as my career started to centre around the .net space, I started to want something that was similar, so I could apply things I had learnt to my own website.&lt;/p>
&lt;p>This has led me to the current state of my website. I have a WordPress blog, with most of my oldest content, my newer content lives on dev.to and I have a Blazor webassembly site that uses the dev.to api to run my new website.&lt;/p>
&lt;p>Blazor webassembly is great, however it has some limitations which I am starting to push against. To host this as cheaply as possible I am using Azure static web apps, so no .net backend all the website is front end. I have some Azure Functions that does the backend bits that I need.&lt;/p>
&lt;p>Google and other bots are not able to find any of my pages except index, due to the way Blazor works. I have got round this by pre rendering the content using &lt;a href="https://prerender.io/" target="_blank" rel="noopener noreferrer">https://prerender.io/&lt;/a>
&lt;/p>
&lt;p>My next difficulty is how to generate a sitemap.xml or a rss feed for my blog. This has started to make me question my architecture decisions.&lt;/p>
&lt;p>I could use a hosted solution like &lt;a href="https://ghost.org/" target="_blank" rel="noopener noreferrer">ghost&lt;/a>
which is popular with a some of my peers. This would solve many of the problems I am currently facing but I wouldn&amp;rsquo;t be able to play with everything as it is hosted and therefore someone else&amp;rsquo;s problem. How important that is I will look at later.&lt;/p>
&lt;p>Another option would be to use github pages, there are quite a few ways to publish a github page, &lt;a href="https://jekyllrb.com/" target="_blank" rel="noopener noreferrer">Jekyll&lt;/a>
and &lt;a href="https://gohugo.io/" target="_blank" rel="noopener noreferrer">Hugo&lt;/a>
appear to be the most popular. Both produce static content and both are a new for me to learn. Interestingly I could also publish either to Azure Static Web apps if github pages ends up not being suitable.&lt;/p>
&lt;h2 id="split-in-two">Split in two&lt;a class="anchor ms-1" href="#split-in-two">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>I think my website needs to be split in two. I need a stable blog platform probably using Hugo and github pages. This is what I want to get indexed by the search engines and be the primary way people find out about what I am doing.&lt;/p>
&lt;p>I then have additional sites, that I use as my playground for learning new tech. I can easily link between them and I can tweak the style so they &amp;ldquo;fit&amp;rdquo; nicely together.&lt;/p>
&lt;p>I am still considering what to do with dev.to. I like that I am using it as the backend for my blog posts, and its API gives me that flexibility to display that content where I want.&lt;/p></description></item><item><title>Azure Key Vault</title><link>https://www.funkysi1701.com/posts/2019/azure-key-vault/</link><pubDate>Tue, 19 Mar 2019 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2019/azure-key-vault/</guid><description>&lt;p>&lt;a href="https://docs.microsoft.com/en-gb/azure/key-vault/" target="_blank" rel="noopener noreferrer">Azure Key Vault&lt;/a>
is a secure way of storing your keys, certificates and secrets so your application can access everything it needs to but you don’t have them being stored insecurely anywhere such as in source control.&lt;/p>
&lt;p>I have been wanting to give Azure Key Vault a try for a while now as it can make use of Azure Active Directory to give your web app an identity so it can authenticate itself into the key vault to access secrets. Pretty clever but with a lot of moving parts a bit complex.&lt;/p>
&lt;p>For my example I am just going to connect to my Key Vault and get a secret and display it somewhere on a web page. This is of course not what you want to do as secrets are secret and shouldn’t be displayed just used to authenticate into whatever, however it is an easy way to prove I am connecting to the Key Vault and everything is working.&lt;/p>
&lt;p>Lets look at some code. I have a .net core application and to start with lets install three nuget packages.&lt;/p>
&lt;pre tabindex="0">&lt;code>Microsoft.Azure.KeyVault
Microsoft.Azure.Services.AppAuthentication
Microsoft.Extensions.Configuration.AzureKeyVault
&lt;/code>&lt;/pre>&lt;p>I’ve not include version numbers as these will no doubt get updated over time but hopefully it will still work.&lt;/p>
&lt;p>Now in your Program.cs add the following code, replacing [KeyVaultName] with the name of your Key Vault.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main(&lt;span style="color:#66d9ef">string&lt;/span>[] args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CreateWebHostBuilder(args).Build().Run();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IWebHostBuilder CreateWebHostBuilder(&lt;span style="color:#66d9ef">string&lt;/span>[] args) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebHost.CreateDefaultBuilder(args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .ConfigureAppConfiguration((context, config) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> builtConfig = config.Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> azureServiceTokenProvider = &lt;span style="color:#66d9ef">new&lt;/span> AzureServiceTokenProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> keyVaultClient = &lt;span style="color:#66d9ef">new&lt;/span> KeyVaultClient(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> KeyVaultClient.AuthenticationCallback(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> azureServiceTokenProvider.KeyVaultTokenCallback));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config.AddAzureKeyVault(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">$&amp;#34;https://[KeyVaultName].vault.azure.net/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyVaultClient,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultKeyVaultSecretManager());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .UseApplicationInsights()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .UseStartup&amp;lt;Startup&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now all you need to do is look at your configuration to pull out secrets from your Azure Key Vault. If you have a secret called AppSecret then you can use the following code snippet to retrieve its value, assuming _configuration is an implementation of Microsoft.Extensions.Configuration.IConfiguration.&lt;/p>
&lt;pre tabindex="0">&lt;code>_configuration[&amp;#34;AppSecret&amp;#34;];
&lt;/code>&lt;/pre>&lt;p>Now if you do all of this and run from an Azure Web App or run locally it will fail to pull anything from the Key Vault. You need to give your web app an identity and configure your key vault to allow access from that identity.&lt;/p>
&lt;p>Once my code has been deployed to an Azure Web App I get the following error.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Image" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2019/03/image.png?fit=662%2C292&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Lets look at fixing that, first lets give my web app an Identity. Open up the Azure portal and find the identity section of your web app and turn the setting on.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Image" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2019/03/image-1.png?fit=662%2C396&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Now you need to grant that identity permission to your key vault. In the portal open up Access Policies in your key vault and click add Policy, select the identity of your web app in the principal box and select the following settings to grant access to your secret.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Image" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2019/03/image-2.png?resize=206%2C428&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Now you have a website that can pull secrets out of Key Vault but only that unique identity. Anyone who has access to your source code will not have access to your secrets, even if they push your code to a different Azure Web App.&lt;/p></description></item><item><title>Website UI Testing</title><link>https://www.funkysi1701.com/posts/2018/website-ui-testing/</link><pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/website-ui-testing/</guid><description>&lt;p>Last week I looked at testing the &lt;a href="https://dev.to/funkysi1701/mobile-app-ui-testing-jgg-temp-slug-9433902" target="_blank" rel="noopener noreferrer">UI of mobile apps&lt;/a>
, this week lets look at how we could do a similar thing for websites.&lt;/p>
&lt;p>Testing the user interface is not an excuse for a lack of &lt;a href="https://dev.to/funkysi1701/writing-your-first-test-53gi-temp-slug-2645725" target="_blank" rel="noopener noreferrer">unit tests&lt;/a>
. Testing the user interface takes longer so for keep creating your small unit tests that can be run after ever build. That said lets look at how you create a UI test.&lt;/p>
&lt;p>Create a Unit Test project as normal. Now install the following nuget packages&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Selenium.WebDriver.ChromeDriverSelenium.WebDriverSelenium.WebDriver.PhantomJS.Xplatform
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I am going to be using Selenium to achieve my website testing and I am going to concentrate on the Chrome browser. However packages exist for other browsers so have a look at the following and I expect there are others as well.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Selenium.WebDriver.IEDriverSelenium.Firefox.WebDriver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="http://www.seleniumhq.org/" target="_blank" rel="noopener noreferrer">Selenium&lt;/a>
started life as a plugin for Firefox to help create automated tests, however the latest version of Firefox is not compatible with the plugin as I write this. I have not had to install any plugins or extensions to my browsers to achieve my testing.&lt;/p>
&lt;p>Enough talk lets write a test. First we create two instance variables to store the baseURL and the driver for the browser you are using.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> baseURL = &lt;span style="color:#e6db74">&amp;#34;https://www.example.com/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> RemoteWebDriver driver;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next we need to set things up for the test to run. This creates an instance of the chrome driver, maximizes the window and sets it to wait 30 seconds before timing out.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestInitialize()]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MyTestInitialize()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver = &lt;span style="color:#66d9ef">new&lt;/span> ChromeDriver();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Manage().Window.Maximize();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(&lt;span style="color:#ae81ff">30&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now comes the actual test. We navigate to a URL and then compare the title of the page loaded with a know value with a Assert statement like you would find in a unit test.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestMethod]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> CheckBrowserTitle()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Navigate().GoToUrl(&lt;span style="color:#66d9ef">this&lt;/span>.baseURL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.AreEqual(&lt;span style="color:#e6db74">&amp;#34;Home Page&amp;#34;&lt;/span>, driver.Title);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally we need to tidy up after ourselves.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestCleanup()]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MyTestCleanup()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Quit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you are used to writing tests you will know that the are usually constructed in three sections Arrange, Act and Assert. The Arrange is done in the initialize method, which makes the actual test much simpler, the first line does the Act and the last line does the Assert.&lt;/p>
&lt;p>Now we have written a simple test lets look at something more complex.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>driver.FindElementByLinkTest(&lt;span style="color:#e6db74">&amp;#34;click&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This finds any Link on the page which is click. Be careful as the string need to be exactly what appears on screen it may well be easier to specify by id or class or something that doesn’t change as often. By adding .click() on the end of this command Selenium will click on the link and you can navigate to a new page.&lt;/p>
&lt;p>&lt;strong>What about submitting form data?&lt;/strong> Well you can find the element you want to fill in and add .SendKeys(&amp;ldquo;example text&amp;rdquo;) or .Submit() and this will fill in and submit form data.&lt;/p>
&lt;p>&lt;strong>What about a screenshot?&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Screenshot ss = driver.GetScreenshot();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ss.SaveAsFile(&lt;span style="color:#e6db74">&amp;#34;test.jpg&amp;#34;&lt;/span>,System.Drawing.Imaging.ImageFormat.Jpeg);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have only just started playing around with web UI tests but you can see there is a fair bit you can do.&lt;/p></description></item><item><title>Side Project – Connect 4</title><link>https://www.funkysi1701.com/posts/2017/side-project-connect-4/</link><pubDate>Mon, 06 Feb 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/side-project-connect-4/</guid><description>&lt;p>Hello?&lt;/p>
&lt;p>You have probably like me almost forgotten about this blog. Life has got in the way over the last few months, but lets see if I can restart my blogging habit.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/02/Connect4.png?w=639&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>In 2017 I want to start a side project for a few reasons. I want to improve my coding skills and look at things I wouldn’t normally during my day job.&lt;/p>
&lt;p>I have been trying to decide what to build. The actual project doesn’t matter too much, it is the techniques I use during build that matters the most. I would like something that I can start off as a windows app and then extend onto the web or mobile apps.&lt;/p>
&lt;p>I started off thinking about a Rubik’s cube app, however my initial coding has lead me to believe it is probably too complex for my first app.&lt;/p>
&lt;p>Last year I spent an evening looking at Connect 4 during a &lt;a href="https://yorkcodedojo.github.io/" target="_blank" rel="noopener noreferrer">York Code Dojo&lt;/a>
session. I think this should be complex enough that I can code some logic to efficiently solve the game, however not too complex I get defeated before building too much.&lt;/p>
&lt;p>So far I have built a console app that displays via Console.Write() commands, a grid to represent the game, with 0 meaning empty, 1 red and 2 yellow etc. I am currently working on the logic to solve the game, once I have that in a good state I can extend into a winforms app, into a web (MVC most likely) app and finally a mobile app (I have no knowledge about how to do this yet, but something I would like to try one day).&lt;/p>
&lt;p>Over the last few days I listened to .NetRocks where they discussed &lt;a href="https://www.dotnetrocks.com/?show=1396" target="_blank" rel="noopener noreferrer">Progressive Web Apps&lt;/a>
. This sounds like a great challenge for me to aim for. A progressive Web App is a website that automatically detects various properties to give you an app that runs well whatever the state of your internet connection and whatever browser you are in.&lt;/p>
&lt;p>I have lots to learn but I can split it down into small sections and I can build something that demonstrates some of my skills.&lt;/p></description></item></channel></rss>