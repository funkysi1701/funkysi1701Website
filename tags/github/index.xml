<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/github/</link><description>Recent content in Github on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 05 Jul 2022 21:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Visual Studio Keyboard Shortcuts</title><link>https://www.funkysi1701.com/posts/2022/keyboard-shortcuts/</link><pubDate>Tue, 05 Jul 2022 21:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2022/keyboard-shortcuts/</guid><description>&lt;p>I use keyboard shortcuts all the time, mostly without thinking, but they can be quite a time saver especially for frequently used tasks.&lt;/p>
&lt;p>I recently came across this list of Visual Studio ones. &lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio?view=vs-2022" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio?view=vs-2022&lt;/a>
&lt;/p>
&lt;p>I was going to do a top ten, but not really sure how you rank keyboard shortcuts, so instead I will mention some of my favourites.&lt;/p>
&lt;h2 id="build-solution">Build solution&lt;a class="anchor ms-1" href="#build-solution">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>If you are using Visual Studio you need to build your code. If you are anything like me, after even the smallest change I want to see what affect that has had so a rebuild is often needed.&lt;/p>
&lt;ul>
&lt;li>Ctrl + Shift + B / Build Solution&lt;/li>
&lt;li>F5 / Run&lt;/li>
&lt;li>Ctrl + F5 / Run with no debugging&lt;/li>
&lt;/ul>
&lt;h2 id="cut-copy-paste-undo-redo">Cut, Copy, Paste, Undo, Redo&lt;a class="anchor ms-1" href="#cut-copy-paste-undo-redo">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>Programming is sometimes refered to as copying and pasting from &lt;a href="https://stackoverflow.com/" target="_blank" rel="noopener noreferrer">StackOverflow&lt;/a>
, but they are always times you want to copy and paste stuff so the standard keyboard shortcuts are all here.&lt;/p>
&lt;ul>
&lt;li>Ctrl + C / Copy&lt;/li>
&lt;li>Ctrl + X / Cut&lt;/li>
&lt;li>Ctrl + V / Paste&lt;/li>
&lt;li>Ctrl + Z / Undo&lt;/li>
&lt;li>Ctrl + Y / Redo (or Undo your Undo)&lt;/li>
&lt;/ul>
&lt;h2 id="comments-in-your-code">Comments in your code&lt;a class="anchor ms-1" href="#comments-in-your-code">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>Often we like to temporarily comment out a line of code to see what affect it has.&lt;/p>
&lt;ul>
&lt;li>Ctrl + K, Ctrl + C / Comment selection&lt;/li>
&lt;li>Ctrl + K, Ctrl + U /Uncomment selection&lt;/li>
&lt;/ul>
&lt;h2 id="using-statements">Using statements&lt;a class="anchor ms-1" href="#using-statements">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>I like to keep my using statements tidy, and not clutered up with ones that aren&amp;rsquo;t used anymore.&lt;/p>
&lt;ul>
&lt;li>Ctrl + R, Ctrl + G / Remove and Sort Usings&lt;/li>
&lt;/ul>
&lt;h2 id="go-to-implementation">Go to Implementation&lt;a class="anchor ms-1" href="#go-to-implementation">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>I like to move quickly between methods that a class is calling to find out what is happening so the go to implementation and go to definition shortcuts are very useful. I tend to use the right click option more than the sortcut, but I would save myself a heap of time if I learnt these shortcuts.&lt;/p>
&lt;ul>
&lt;li>F12 / Go to Definition&lt;/li>
&lt;li>Alt + F12 / Peek Definition&lt;/li>
&lt;li>Ctrl + F12 / Go to Implementation&lt;/li>
&lt;/ul>
&lt;h2 id="find-file-in-solution-explorer">Find file in Solution Explorer&lt;a class="anchor ms-1" href="#find-file-in-solution-explorer">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>You are editing a file and you have no idea what folder it is in the Solution Explorer. There is a shortcut to find out where you are.&lt;/p>
&lt;p>Ctrl + [, S / Select Active File in Solution Explorer&lt;/p>
&lt;h2 id="search">Search&lt;a class="anchor ms-1" href="#search">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>Finding references or a certain string is a common activity&lt;/p>
&lt;ul>
&lt;li>Ctrl + F / Find in current file&lt;/li>
&lt;li>Ctrl + H / Replace&lt;/li>
&lt;li>Ctrl + Shift + F / Find in all files&lt;/li>
&lt;/ul>
&lt;h2 id="visual-studio-tries-to-be-helpful">Visual Studio tries to be helpful&lt;a class="anchor ms-1" href="#visual-studio-tries-to-be-helpful">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>Often Visual Studio will try and be helpful with a lightbulb or similar icon, instead of clicking you can press this shortcut to&lt;/p>
&lt;ul>
&lt;li>Ctrl + . / Show Visual Studio suggestion&lt;/li>
&lt;/ul>
&lt;h2 id="learn-some-more">Learn some more&lt;a class="anchor ms-1" href="#learn-some-more">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>As I said before keyboard shortcuts are great time savers. Go check out the complete list and share with me the ones you found most useful.&lt;/p></description></item><item><title>Diagrams with Mermaid</title><link>https://www.funkysi1701.com/posts/2022/diagrams-with-mermaid/</link><pubDate>Sun, 19 Jun 2022 18:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2022/diagrams-with-mermaid/</guid><description>&lt;p>I have been wanting to produce a diagram of the architecture of my side project for some time, but I have put it off as never sure what the correct tools is for this job.&lt;/p>
&lt;p>&lt;a href="http://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener noreferrer">Mermaid&lt;/a>
is a tool that lets you create diagrams from code and text. I first came across this tool about a year ago for use in a project. I had forgotten about this tool until the other day, when I was thinking about this problem again.&lt;/p>
&lt;p>Is it possible to embed a mermaid diagram in the markdown used in a github repo? Well the answer is yes, so lets look at how that works.&lt;/p>
&lt;p>A simple mermaid diagram looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>graph TD;
A[fff]---&amp;gt;B;
A---&amp;gt;C;
B---&amp;gt;D;
C---&amp;gt;D;
&lt;/code>&lt;/pre>&lt;p>which renders like this:&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://www.funkysi1701.com/images/mermaid.png" loading="lazy"
width="630" height="912"
/>
&lt;/p>
&lt;p>Lets look at what it is doing.&lt;/p>
&lt;p>TD means the chart is top down.&lt;/p>
&lt;p>A is the name of a node in the chart, [fff] is a label being applied to it.&lt;/p>
&lt;p>Then we just define the relationships between the different nodes, you can have &amp;lt;&amp;mdash;, &amp;mdash;&amp;gt; or &amp;mdash;, or even&lt;br/> &amp;lt;&amp;mdash;&amp;gt;&lt;/p>
&lt;p>Lets look at my architecture. I have a database (cosmosDB), I have a website running on Azure Static Web Apps, I have some Azure functions for getting data into and out of my database. I also have Application Insights monitoring the whole thing. I also have a console app for doing some data import stuff. This produces a diagram like this:&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://www.funkysi1701.com/images/mermaid2.png" loading="lazy"
width="409" height="445"
/>
&lt;/p>
&lt;p>The code to produce this and display it on my &lt;a href="https://github.com/funkysi1701/Blogv2/" target="_blank" rel="noopener noreferrer">github repo&lt;/a>
is simply&lt;/p>
&lt;pre tabindex="0">&lt;code>```mermaid
graph TD
A[Azure Static Web App]---B[Http Fn]
B---D[Database]
C[Timer Fn]---D
D---E[Import Console App]
F[App Insights]---A
F---B
F---C
&lt;/code>&lt;/pre>&lt;p>Pretty nice for a few lines of code to show what system talks with what.&lt;/p>
&lt;p>There are improvements that can be made to the diagram, for example changing the shapes of the different services.&lt;/p>
&lt;p>eg &lt;img class="img-fluid" alt="" src="https://www.funkysi1701.com/images/mermaid3.png" loading="lazy"
width="1034" height="253"
/>
&lt;/p>
&lt;p>If you live in the AzureDevOps world you can add a mermaid diagram to your wiki pages (but I don&amp;rsquo;t think to your markdown files). Just use the following syntax&lt;/p>
&lt;pre tabindex="0">&lt;code>::: mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
John--&amp;gt;&amp;gt;Alice: Great!
Alice-)John: See you later!
:::
&lt;/code>&lt;/pre>&lt;p>For more info see the docs &lt;a href="https://docs.microsoft.com/en-us/azure/devops/project/wiki/wiki-markdown-guidance?view=azure-devops" target="_blank" rel="noopener noreferrer">here&lt;/a>
&lt;/p>
&lt;p>What diagrams are you going to build?&lt;/p></description></item><item><title>Using GitHub Actions</title><link>https://www.funkysi1701.com/posts/2022/using-github-actions/</link><pubDate>Mon, 10 Jan 2022 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2022/using-github-actions/</guid><description>&lt;p>I&amp;rsquo;ve been running my website on Azure Static Web Apps for a while and it is pretty cool.&lt;/p>
&lt;p>When you create a Static Web App on Azure you get asked for the github repo of your source code and even the branch to use.
&lt;img class="img-fluid" alt="GitHub Repo for my Static Web App" src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/off7ur2tgsla4smkrhhi.png" loading="lazy"
/>
&lt;/p>
&lt;p>Once you have selected this, you get asked for the type of code to deploy, mine is Blazor Web Assembly but you can use Angular, React or Vue.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="GitHub Actions workflow creation" src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruhzjeujgl1yjxx5lng8.png" loading="lazy"
/>
You now have three variables to fill in the location in your code of the Website, the location of your Azure Functions and the output location usually wwwroot. Once you have set these three you can preview the GitHub Actions file that will be created and added to your repository.&lt;/p>
&lt;p>I get something like this&lt;/p>
&lt;pre tabindex="0">&lt;code>name: Azure Static Web Apps CI/CD
on:
push:
branches:
- feature/tempbranch
pull_request:
types: [opened, synchronize, reopened, closed]
branches:
- feature/tempbranch
jobs:
build_and_deploy_job:
if: github.event_name == &amp;#39;push&amp;#39; || (github.event_name == &amp;#39;pull_request&amp;#39; &amp;amp;&amp;amp; github.event.action != &amp;#39;closed&amp;#39;)
runs-on: ubuntu-latest
name: Build and Deploy Job
steps:
- uses: actions/checkout@v2
with:
submodules: true
- name: Build And Deploy
id: builddeploy
uses: Azure/static-web-apps-deploy@v1
with:
azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_&amp;lt;GENERATED_HOSTNAME&amp;gt; }}
repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
action: &amp;#34;upload&amp;#34;
###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
# For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
app_location: &amp;#34;Client&amp;#34; # App source code path
api_location: &amp;#34;Api&amp;#34; # Api source code path - optional
output_location: &amp;#34;wwwroot&amp;#34; # Built app content directory - optional
###### End of Repository/Build Configurations ######
close_pull_request_job:
if: github.event_name == &amp;#39;pull_request&amp;#39; &amp;amp;&amp;amp; github.event.action == &amp;#39;closed&amp;#39;
runs-on: ubuntu-latest
name: Close Pull Request Job
steps:
- name: Close Pull Request
id: closepullrequest
uses: Azure/static-web-apps-deploy@v1
with:
azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_&amp;lt;GENERATED_HOSTNAME&amp;gt; }}
action: &amp;#34;close&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This github action will run when you create a Pull Request to the branch mentioned in the file, or if you push code into the branch. This code get added into the .github/workflows/ folder and is the location that all github action workflows live.&lt;/p>
&lt;p>I haven&amp;rsquo;t done much with github actions, however I have used Azure DevOps quite a bit. Over on the Azure DevOps side I have created a pipeline that deploys to a Dev environment, then a Test environment and finally a production environment.&lt;/p>
&lt;p>Lets have a look at the workflow that I ended up with and with can break down how it all works. Note I am new to Github actions so if there is a better way of doing this do let me know.&lt;/p>
&lt;pre tabindex="0">&lt;code>name: Azure Static Web Apps
on:
push:
branches:
- main
- develop
- feature/*
jobs:
dev:
runs-on: ubuntu-latest
environment:
name: Dev
name: Dev
steps:
- uses: actions/checkout@v2
with:
submodules: true
- name: Build And Deploy
id: builddeploy
uses: Azure/static-web-apps-deploy@v1
with:
azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ORANGE_POND_09B18B903 }}
repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
action: &amp;#34;upload&amp;#34;
###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
# For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
app_location: &amp;#34;Blog&amp;#34; # App source code path
api_location: &amp;#34;Blog.Func&amp;#34; # Api source code path - optional
output_location: &amp;#34;wwwroot&amp;#34; # Built app content directory - optional
###### End of Repository/Build Configurations ######
test:
if: github.ref == &amp;#39;refs/heads/develop&amp;#39;
runs-on: ubuntu-latest
environment:
name: Test
name: Test
steps:
- uses: actions/checkout@v2
with:
submodules: true
- name: Build And Deploy
id: builddeploy
uses: Azure/static-web-apps-deploy@v1
with:
azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_WITTY_DUNE_0A1A77903 }}
repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
action: &amp;#34;upload&amp;#34;
###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
# For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
app_location: &amp;#34;Blog&amp;#34; # App source code path
api_location: &amp;#34;Blog.Func&amp;#34; # Api source code path - optional
output_location: &amp;#34;wwwroot&amp;#34; # Built app content directory - optional
###### End of Repository/Build Configurations ######
prod:
if: github.ref == &amp;#39;refs/heads/main&amp;#39;
runs-on: ubuntu-latest
environment:
name: Prod
name: Prod
steps:
- uses: actions/checkout@v2
with:
submodules: true
- name: Build And Deploy
id: builddeploy
uses: Azure/static-web-apps-deploy@v1
with:
azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BRAVE_ROCK_0AAC63D03 }}
repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
action: &amp;#34;upload&amp;#34;
###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
# For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
app_location: &amp;#34;Blog&amp;#34; # App source code path
api_location: &amp;#34;Blog.Func&amp;#34; # Api source code path - optional
output_location: &amp;#34;wwwroot&amp;#34; # Built app content directory - optional
###### End of Repository/Build Configurations ######
&lt;/code>&lt;/pre>&lt;p>The first thing I did was create three Azure Static Web Apps, I am using the free tier so while this is trippling my costs it is all still free! Doing this created three github action workflow files, I deleted two and edited the third, but before I deleted them I made a note of the AZURE_STATIC_WEB_APPS_API_TOKEN. If you look in your settings -&amp;gt; secrets for your repo you will see secrets have been created, this is the secure token that github uses to update your static web app.&lt;/p>
&lt;p>While we are in settings we might as well look at environments. I created a Prod, Test and Dev environment that I was going to use in my github actions.&lt;/p>
&lt;p>Environments can have various rules setup on them.&lt;/p>
&lt;ul>
&lt;li>Required reviewers - this is like an approver, a user specified here must aprove for the workflow to be deployed&lt;/li>
&lt;li>Wait time - I didn&amp;rsquo;t use this, but it looks like a certain amount of time can be set to pause the deployment. (I assume to do some kind of manual check)&lt;/li>
&lt;li>Deployment Branch - specify what branch are allowed to be deployed to what environments. I specified develop, main and feature branches could be deployed to the Dev environment, develop and main could go on Test and main could go on Prod&lt;/li>
&lt;li>Environment secrets - I didn&amp;rsquo;t use this as my secrets were already created, however it looks like your secrets can be associated with a specific environment&lt;/li>
&lt;/ul>
&lt;p>Now that we have the static web apps setup and the environments lets look at the github action file.&lt;/p>
&lt;p>First of all I removed the PR stuff and just concentrated on pushes. I wanted my workflow to be.&lt;/p>
&lt;ol>
&lt;li>Push to feature branch&lt;/li>
&lt;li>Deploys to Dev env&lt;/li>
&lt;li>PR feature branch to develop&lt;/li>
&lt;li>Once merged code gets pushed into develop&lt;/li>
&lt;li>Deploys to Test env&lt;/li>
&lt;li>PR develop to main&lt;/li>
&lt;li>Once merged code gets pushed into main&lt;/li>
&lt;li>Deploys to Prod env (after approval)&lt;/li>
&lt;/ol>
&lt;p>The approval on deploying to production I think is probably overkill, but I still have it setup like that for now.&lt;/p>
&lt;p>My gh action has three jobs defined as dev: test: and prod: they are all the same except they have the azure_static_web_apps_api_token that is correct for their environment.&lt;/p>
&lt;p>They also each have a environment defined eg&lt;/p>
&lt;pre tabindex="0">&lt;code>environment:
name: Prod
&lt;/code>&lt;/pre>&lt;p>Lastly Test and Prod have an if test setup, if the test is false the job won&amp;rsquo;t run. Importantly it won&amp;rsquo;t fail it just won&amp;rsquo;t run.&lt;/p>
&lt;p>For Prod this needs to only run on main branch so we have&lt;/p>
&lt;p>if: github.ref == &amp;lsquo;refs/heads/main&amp;rsquo;&lt;/p>
&lt;p>For Test this needs to only run on develop so&lt;/p>
&lt;p>if: github.ref == &amp;lsquo;refs/heads/develop&amp;rsquo;&lt;/p>
&lt;p>I could have a test for develop to only run on feature/* but I have allowed it to run everytime.&lt;/p>
&lt;p>There is loads more you can do with github actions, but hopefully this gives you a taste of some of the things you can do. I currently have a mix of Azure DevOps and github actions so I will be working on getting github actions to do more.&lt;/p></description></item><item><title>GitHub history</title><link>https://www.funkysi1701.com/posts/2017/github-history/</link><pubDate>Mon, 24 Apr 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/github-history/</guid><description>&lt;p>I created my GitHub account in August 2010, lets look at what I have done with it.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/04/git10.jpg?resize=768%2C173&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>In 2010 I started by committing the code for an old php website I had created. Then in December I committed some other php sites.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/04/git11.jpg?resize=768%2C171&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Between 12 December 2010 and 29 September 2011 I must have created some automated process which is why there is a commit every day. Looking at the diff it appears to be related to tracking visitors to a site. I assume back then I hadn’t heard of the .gitignore file!&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/04/git14.jpg?resize=768%2C174&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Nothing for a few years until 2014, when I started compiling a code samples collection, this is bits of code that I want to show off, I have added to this since 2015 so I really should go back to this as my skills have developed a bit since then.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/04/git15.jpg?resize=768%2C173&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>In 2015 I really started to think of myself as a developer, I added repositories for Raspberry Pi, and a few C# ideas I had. I ended the year taking part in Advent of Code&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/04/git16.jpg?resize=768%2C173&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>What did I do last year? Well I started going to York Code Dojo and this meant lots of forks from their code examples and also my first pull request. I also did a fair bit of looking at other repositories trying to find a good open source project to contribute to, still not found one for me yet. Lastly I ended 2016 with a bit of Advent of Code.&lt;/p>
&lt;p>Not sure how enthralling a blog post this is, but fascinating to see the different commit histories.&lt;/p></description></item></channel></rss>