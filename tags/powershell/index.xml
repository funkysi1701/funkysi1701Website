<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Powershell on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/powershell/</link><description>Recent content in Powershell on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 01 Oct 2015 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Copying settings to an Azure Website</title><link>https://www.funkysi1701.com/posts/2015/copying-settings-to-an-azure-website/</link><pubDate>Thu, 01 Oct 2015 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2015/copying-settings-to-an-azure-website/</guid><description>&lt;p>The Software as a Service (SaaS) website that I work on has been sold to lots of clients now. Which is great news.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2015/09/2275.app-1.png?w=550&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>However the more Azure websites we have, the more websites we have to administer, especially if like us you take advantage of Traffic Manager which requires multiple website in different regions. Azure has some great options for making this administration easier. One job is adding all the settings onto the Azure portal, so far I have been manually adding these, but a quicker way is to use powershell.&lt;/p>
&lt;h2 id="powershell">PowerShell&lt;a class="anchor ms-1" href="#powershell">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h2>
&lt;p>PowerShell is everywhere these days. You can use it to control Servers, Active Directory and Exchange. So it is no surprise that you can use it to control Azure.&lt;/p>
&lt;p>Open a powershell window and run the following command.&lt;/p>
&lt;pre tabindex="0">&lt;code>Get-AzurePublishSettingsFile
&lt;/code>&lt;/pre>&lt;p>This command opens an IE window which you can login to Azure and download a file which contains settings that Azure can use. Save the *.publishsettings file and run the following command.&lt;/p>
&lt;pre tabindex="0">&lt;code>Import-AzurePublishSettingsFile &amp;#34;C:\MyPublishSettings\mysubscriptions.publishsettings&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This imports your Azure settings so that PowerShell can do clever things.&lt;/p>
&lt;pre tabindex="0">&lt;code>Select-AzureSubscription -Default &amp;#34;mysubscription&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This selects which of your Azure subscriptions to use. Now run the following to import settings into PowerShell.&lt;/p>
&lt;pre tabindex="0">&lt;code>$s = @{&amp;#34;DebugEmailAccount&amp;#34;=&amp;#34;test@example.com&amp;#34;;&amp;#34;SiteWarningBannerText&amp;#34;=&amp;#34;&amp;#34;}
&lt;/code>&lt;/pre>&lt;p>And finally run the following to import this settings into the Azure website you specified.&lt;/p>
&lt;pre tabindex="0">&lt;code>Set-AzureWebsite azure-websitename -AppSettings $s
&lt;/code>&lt;/pre>&lt;p>Sounds easy doesn’t it. Well it is. The hardest part is getting the settings in the correct format to be imported but this is only string manipulation.&lt;/p>
&lt;p>For my project I already have a build script which populates a settings.config file with all these settings, so I have just duplicated this to create a settings.config.importtoAzure file. Next time I have a website to create, I can create it on Azure and run the above script, pasting in the settings file that my build has already produced for me.&lt;/p>
&lt;p>This only scratches the surface of what you can do with Azure and PowerShell, hopefully I will do far more in the future.&lt;/p></description></item><item><title>Tidying my desktop</title><link>https://www.funkysi1701.com/posts/2015/tidying-my-desktop/</link><pubDate>Wed, 11 Mar 2015 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2015/tidying-my-desktop/</guid><description>&lt;p>My desktop is always a mess. I constantly download files there and forget all about them.&lt;/p>
&lt;p>Every now and then I copy files into sub directories, so my desktop looks sane for a day or two before it gets out of control again.&lt;/p>
&lt;p>Why don’t I write a script that I can schedule to do this for me. Then my desktop will always be tidy.&lt;/p>
&lt;p>I have written a few simple batch scripts, but of course the best scripting language out there at the moment is PowerShell. Lets use that.&lt;/p>
&lt;p>Windows provides a nice little utility for writing scripts called the Windows PowerShell ISE, so let&amp;rsquo;s start by loading that up.&lt;/p>
&lt;p>PS has lots of help included to help you, just run &lt;strong>Get-Help [name of ps command]&lt;/strong>&lt;/p>
&lt;p>To move files you can use &lt;strong>Move-Item&lt;/strong> which works very similar to copy, specify source and destination. In my case I moved files based on their file extension.&lt;/p>
&lt;p>Move-Item *.pdf folder&lt;/p>
&lt;p>Now all I need to do is schedule this script to run either every day or so, or maybe every time I login or switch my computer on.&lt;/p>
&lt;p>PowerShell can do lots more interesting things which hopefully I will blog about soon.&lt;/p></description></item><item><title>Laziness</title><link>https://www.funkysi1701.com/posts/2015/laziness/</link><pubDate>Wed, 04 Feb 2015 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2015/laziness/</guid><description>&lt;p>I am lazy, I won’t try and deny that. When my alarm goes off in the morning, I will snooze it for twenty minutes or so before getting out of bed.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2015/02/bill-gates-quote.jpg" loading="lazy"
/>
&lt;/p>
&lt;p>In my work my laziness continues. Remote Desktop (or RDP) is probably my number one laziness tool. For those that don’t know RDP allows you to connect to another computer and access it like you were sat in front of it. So I can be sat at my desk and RDP into any other computer in the office including any server. However this laziness tool does sometimes require a bit of effort sometimes, powering on the target computer, logging on locally, making sure the user account you are using is allowed to use RDP.&lt;/p>
&lt;p>Writing a script is another example of a laziness tool. I often get asked to do tedious and long-winded task, because I am lazy I will go out of my way to learn how to write a script to do this, so that I can run this script and do this long-winded task in a matter of seconds. There are loads of different types of scripts from database SQL scripts, to PowerShell scripts that can do almost anything on your server.&lt;/p>
&lt;p>PowerShell is something Microsoft are really pushing at the moment, you can even write scripts to create new user accounts, so no longer will you have to remember to tick that tickbox for every new user account. And because PowerShell is part of almost all MS technologies you can link Exchange to Active Directory and you don’t even have to remember the right syntax as PowerShell has a built-in help command to tell you how to run that useful command.&lt;/p>
&lt;p>As I am now moving into a more developer role can I continue to be lazy? I sure can. Code should be written once and reused as often as possible and this is one of the features of OOP (Object Oriented Programming).&lt;/p>
&lt;p>It can be as simple as creating a master page so you don’t need to recreate the same code on every one of your webpages. Or every time you find yourself rewriting the same code again, you plug it into a method so it can be called again and again.&lt;/p>
&lt;p>But of course the ultimate way to be lazy is of course get yourself some staff and spend all day getting them to do everything. If you are lucky they may even try and adopt some of these lazy ideas.&lt;/p></description></item></channel></rss>