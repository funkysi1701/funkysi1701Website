<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Studio on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/visual-studio/</link><description>Recent content in Visual Studio on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 02 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/visual-studio/index.xml" rel="self" type="application/rss+xml"/><item><title>Code Reviews</title><link>https://www.funkysi1701.com/posts/2018/codereviews/</link><pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/codereviews/</guid><description>&lt;p>Reviewing code is a great habit to get into. Code reviews help share knowledge between your team members and help catch bugs before they get into production. But how do you get into the habit of reviewing and avoid the we don’t have time to do this mentality?&lt;/p>
&lt;p>Visual Studio Team Services (VSTS) has some great options that can help make code reviews second nature.&lt;/p>
&lt;h4 id="pull-requests">Pull Requests&lt;a class="anchor ms-1" href="#pull-requests">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>A lot of source control systems have the concept of pull requests. This is where you request others to review your code usually in a branch and if they approve it, merge it into a main branch.&lt;/p>
&lt;p>To create a pull request in VSTS go to the Code section and select Pull Requests. Often VSTS will make a suggestion of what branch to make a pull request for, if you don’t see this just click the New Pull request button.&lt;/p>
&lt;p>Select a branch you want to merge from and a branch that should be merged into (usually you merge into master from a feature branch). Give your pull request a title and description and select who should review your code, this can either be an individual or a group of people. You can also review all the changes that will be reviewed so you can make any last minute changes before it is reviewed.&lt;/p>
&lt;p>Now if you are anything like me you want your code merged in as soon as you have created your pull request and there is nothing stopping you reviewing your own code and clicking approve and merge on your own pull request. However &lt;a href="https://docs.microsoft.com/en-us/vsts/git/branch-policies?view=vsts" target="_blank" rel="noopener noreferrer">branch policies&lt;/a>
is a way around this problem.&lt;/p>
&lt;h4 id="branch-policies">Branch Policies&lt;a class="anchor ms-1" href="#branch-policies">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>&lt;img class="img-fluid" alt="Branch Policy" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2018/04/save-policy-changes.png?resize=599%2C901&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Branch policies allow you to specify how your code gets merged in.&lt;/p>
&lt;p>Go to the list of branches in VSTS and select branch policy and you will see a whole host of options to customise the merge process. If you do this on the master branch you will not be able to commit any changes to master without it going through a pull request.&lt;/p>
&lt;p>The first option enables you to select how many reviewers are needed on your code. If no one else works on your project best not setting this, but for everyone else setting at least one person to review your code is a great practice.&lt;/p>
&lt;p>Next you can ensure that your pull request is linked to a work item, this helps keep ensure you are actually fixing issues and not just making change for the sake of it.&lt;/p>
&lt;p>Check for comment resolution is a good setting to enable. This ensures that if your reviewer has commented about you needing to change this line here, it ensures that you do.&lt;/p>
&lt;p>Enforce merge strategy allows you to choose between fast forward merge or squash merge.&lt;/p>
&lt;p>Build validation enables the code to be built using a build definition you have configured. This is a great way to check code builds or tests pass before it gets merged in.&lt;/p>
&lt;p>The last two options allow you to specify code reviewers and third party external services.&lt;/p></description></item><item><title>How to get Zero Code Changes outside of Source Control</title><link>https://www.funkysi1701.com/posts/2017/get-zero-code-changes-outside-source-control/</link><pubDate>Mon, 13 Nov 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/get-zero-code-changes-outside-source-control/</guid><description>&lt;p>Source control is bread and butter for web developers, however not so much for SQL developers and other business people. One of my goals for the coming year is to get the whole of my team using source control processes.&lt;/p>
&lt;p>One of the arguments against using source control is there will always be a few exceptions where it won’t be used. Lets look at a few scenarios to help make the case for source control.&lt;/p>
&lt;p>&lt;strong>Scenario One&lt;/strong>&lt;/p>
&lt;p>Web Dev 1 makes a change in production to fix an issue and doesn’t use source control. Web Dev 2 is working on a new feature and makes use of source control. He is given the sign-off to deploy his new feature and in the process undoes Web Dev 1’s fix.&lt;/p>
&lt;p>Management blames Web Dev 2 as they “broke” stuff during the deployment. Web Dev 2 doesn’t understand what happened and Web Dev 1 is oblivious to the entire scenario despite in reality being part of the problem.&lt;/p>
&lt;p>&lt;strong>Scenario Two&lt;/strong>&lt;/p>
&lt;p>A SQL Dev works all night to fix a problem. He deploy to production and doesn’t notice a missed where clause due to lack of sleep.&lt;/p>
&lt;p>—&lt;/p>
&lt;p>Let’s look at these two scenarios done with the whole team buying into source control.&lt;/p>
&lt;p>&lt;strong>Scenario One&lt;/strong>&lt;/p>
&lt;p>Web Dev 1 makes a change in production to fix an issue and also commits to source control. This takes him an extra 5 minutes (if that!) Web Dev 2 is working on a new feature and makes use of source control. He is given the sign-off to deploy his new feature and in the process merges Web Dev 1’s fix before he deploys to production.&lt;/p>
&lt;p>Management is happy with Web Dev 1, nothing is broken and new functionality has made the website better not worse.&lt;/p>
&lt;p>&lt;strong>Scenario Two&lt;/strong>&lt;/p>
&lt;p>A SQL Dev works all night to fix a problem. He deploy to production and doesn’t notice a missed where clause due to lack of sleep, he also commits to source control this takes him an extra 5 minutes (if that!).&lt;/p>
&lt;p>In the morning a colleague looks through the commits made during the night and queries the missing where clause. A fix is made in source control and deployed, management and the client are unaware that a problem was created and fixed.&lt;/p>
&lt;p>—&lt;/p>
&lt;p>These are simple scenarios but I cannot think of any situation where the outcome would be better to not use source control. These examples assume no continuous deployment, adding this to the system before every team has bought into source control would cause bugs and issues all over the place.&lt;/p>
&lt;p>However with a team that is 100% behind source control continuous deployment can achieve an amazing productivity boost. After every commit code could be automatically tested, reviewed by other members of the team and deployed to test environments for further analysis. Only tested code that has been reviewed can get anywhere near production environments.&lt;/p>
&lt;p>Having said all this there are ways especially on the SQL side to mitigate loosing changes while you work on training individuals and convincing management. Before any code is deployed to production do a schema compare. If you only see changes you have made you can proceed, if you don’t shout at your team.&lt;/p>
&lt;p>&lt;strong>Advantages&lt;/strong>&lt;/p>
&lt;p>Code Reviews&lt;br>
Team awareness of what is being changed&lt;br>
History of changes&lt;br>
Smoother Deployments&lt;br>
Automation&lt;br>
Better Teamwork&lt;br>
Diff changes between different versions&lt;br>
Many more&lt;/p>
&lt;p>&lt;strong>Disadvantages&lt;/strong>&lt;/p>
&lt;p>Time to learn tools&lt;br>
Remember to commit changes&lt;br>
Technologies that use binary files harder to version control&lt;/p></description></item><item><title>SQL with Visual Studio Code</title><link>https://www.funkysi1701.com/posts/2017/sql-with-visual-studio-code/</link><pubDate>Mon, 06 Nov 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/sql-with-visual-studio-code/</guid><description>&lt;p>Writing SQL queries is typically done with SQL Management Studio (SSMS). However this tool is a bit of a beast so let’s look at how you could use Visual Studio Code instead.&lt;/p>
&lt;p>Visual Studio Code is a free text editor but it is so much more than just a text editor. VS Code can be downloaded from &lt;a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/Download&lt;/a>
&lt;/p>
&lt;p>To work with SQL Server download the mssql extension. Press &lt;strong>CTRL+SHIFT+P&lt;/strong> and then Select &lt;strong>Install Extension&lt;/strong> and type &lt;strong>mssql&lt;/strong>.&lt;/p>
&lt;p>Intellisense in Visual Studio Code is brilliant, better than SSMS. Lets look at how to get it all set up.&lt;/p>
&lt;p>Create a new file and set the language type to SQL (Press &lt;strong>CTRL+K,M&lt;/strong> )&lt;/p>
&lt;p>Open the command palette, &lt;strong>CTRL+SHIFT+P&lt;/strong> and type SQL to show the mssql commands. Select the Connect command.&lt;/p>
&lt;p>Then select &lt;strong>Create Connection Profile&lt;/strong> , this creates a profile to connect with your SQL Server. Follow the prompts to get it all setup.&lt;/p>
&lt;p>Look in the bottom right corner of the status bar and you should see you are connected.&lt;/p>
&lt;p>Now if you type sql you will see a long list of SQL code snippets that you could use.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/11/vscode-sql-snippets.png?resize=662%2C348&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Choose a snippet to create, and edit it as required. When you are happy press **CTRL+SHIFT+E ** to execute.&lt;/p>
&lt;p>This is basically all there is to it. However this is an incredibly powerful way of working, the intellisense instantly tells you what database objects you can use in your query and there is a wealth of different snippets you can use.&lt;/p>
&lt;p>When returning data you get a similar view to SSMS but you can save as Excel, CSV or JSON.&lt;/p>
&lt;p>SSMS is a very graphical way of doing things, you can double click a table and see its columns or indexes. VS Code relies on TSQL commands but you have access to exactly the same information.&lt;/p>
&lt;p>For more information about VS Code and the mssql extension check out &lt;a href="https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-develop-use-vscode" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-develop-use-vscode&lt;/a>
&lt;/p></description></item><item><title>Creating your own nuget packages with VSTS</title><link>https://www.funkysi1701.com/posts/2017/creating-nuget-packages/</link><pubDate>Mon, 31 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/creating-nuget-packages/</guid><description>&lt;p>For a while I have found myself writing the same bits of code for different web projects. This annoys me as it goes against the DRY principle (don’t repeat yourself).&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Nuget" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/07/nuget.png?resize=300%2C91&amp;amp;ssl=1" loading="lazy"
/>
One possible solution is to write your own nuget packages. You can then add this piece of code to any project you work on.&lt;/p>
&lt;p>&lt;a href="https://www.nuget.org/" target="_blank" rel="noopener noreferrer">nuget.org&lt;/a>
is the public nuget feed where any developer can download nuget packages. You could publish your nuget package here, but your might want to restrict access so better to create a private nuget feed.&lt;/p>
&lt;p>Lets look at how we create a nuget feed in Visual Studio. First thing you need to do is install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms.feed" target="_blank" rel="noopener noreferrer">Package Management&lt;/a>
extension to Visual Studio Team Services (its free for less than 5 users), this will add a packages section under the build menu.&lt;/p>
&lt;p>Before you can start using this new feature you need to add a Package Management License in the users hub.&lt;/p>
&lt;p>Once that is done you can create a feed. You need to give your feed a name, decide if only members of the current project or everyone in your account should have access to read and contribute to.&lt;/p>
&lt;p>Now you have a feed you could use the nuget package command to create a nupkg file and then nuget push command to add it to your feed. A better way is to get Visual Studio Team Services to do all the hard work.&lt;/p>
&lt;p>Create a new project in Visual Studio Team Service to house your nuget package. In the build section add an empty build definition. Choose a build agent, I am using the Hosted VS2017. Then add the following steps nuget restore, Visual Studio Build, nuget pack and nuget push.&lt;/p>
&lt;ul>
&lt;li>nuget restore – this step is only needed if your code depends on other packages. If it depends on other packages that are only in your feed you must specify your feed in the feeds and authentication section.&lt;/li>
&lt;li>Visual Studio Build – this builds your code like you would in Visual Studio. The only config I made to this step was to specify Release in configuration.&lt;/li>
&lt;li>nuget pack – this creates the nupkg file from your built project. In configuration to package specify the same as you specified in the previous step (in my case Release)&lt;/li>
&lt;li>nuget push – this publishes to your feed, so of course you need to specify your feed.&lt;/li>
&lt;/ul>
&lt;p>One last thing to configure is to enable the continuous integration option in triggers. This means whenever you push code all these steps will run and you have a new version of your nuget package.&lt;/p>
&lt;p>In Visual Studio you need to create a *.nuspec file, this contains all the meta data about your nuget package. Let look at an example.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;package&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;metadata&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;id&amp;gt;&lt;/span>$id$&lt;span style="color:#f92672">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>1.0.2&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;title&amp;gt;&lt;/span>Nuget&lt;span style="color:#f92672">&amp;lt;/title&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;authors&amp;gt;&lt;/span>Simon Foster&lt;span style="color:#f92672">&amp;lt;/authors&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;owners&amp;gt;&lt;/span>Simon Foster&lt;span style="color:#f92672">&amp;lt;/owners&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;requireLicenseAcceptance&amp;gt;&lt;/span>false&lt;span style="color:#f92672">&amp;lt;/requireLicenseAcceptance&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;description&amp;gt;&lt;/span>An example of a nuget package.&lt;span style="color:#f92672">&amp;lt;/description&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;releaseNotes&amp;gt;&lt;/span>Release Notes&lt;span style="color:#f92672">&amp;lt;/releaseNotes&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;copyright&amp;gt;&lt;/span>Copyright 2017&lt;span style="color:#f92672">&amp;lt;/copyright&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;projectUrl&amp;gt;&lt;/span>https://[yourVSaccount].visualstudio.com/nuget/&lt;span style="color:#f92672">&amp;lt;/projectUrl&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/metadata&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/package&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One last thing to mention is version numbers. You can either change the version number in your *.nuspec file everytime you push changes. This will create stable packages like 1.0, 1.1, 1.2 etc&lt;/p>
&lt;p>However you can use the automatic version number setting in the nuget pack build step. However I have found this only ever creates pre-release packages and I haven’t found a way to upgrade a package from pre-release to stable.&lt;/p>
&lt;p>This is a really neat way to reuse your code in multiple projects. I have only been looking at this for a few days and I have already extracted code to do with emails, creating excel downloads and database related methods. I suspect that doing this will also have a side benefit of forcing me to create code with fewer dependencies so more code can be turned into a nuget package.&lt;/p></description></item><item><title>Test Driven Development or TDD</title><link>https://www.funkysi1701.com/posts/2017/test-driven-development-tdd/</link><pubDate>Mon, 13 Mar 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/test-driven-development-tdd/</guid><description>&lt;p>A few weeks back I attended a talk at &lt;a href="http://www.agileyorkshire.org/event-announcements/tuesfebruary21st-drolivershawtestdrivendevelopmentthemostmisusedterminsoftwaredevelopmentandkeithwilliamsdependenciesinjectionandabstractionforfunandprofit" target="_blank" rel="noopener noreferrer">Agile Yorkshire&lt;/a>
about Test Driven Development or TDD by Dr Oliver Shaw. I was impressed at how easy Oliver made it look, so as I have never tried it I thought I should give it a try.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/03/tdd_flow.gif?resize=287%2C300&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Test Driven Development or TDD is a way of development which starts with writing a Unit Test. First you write a failing test, then you write the code to make it pass, then you refactor your code. This can be remembered by thinking of &lt;strong>Red, Green, Refactor&lt;/strong>. Red being the failing test, Green being getting the test to pass, and Refactor being the refactoring.&lt;/p>
&lt;p>During the demonstration Oliver used a language called scala and a system that automatically reran all the tests after every change. I code with Visual Studio in C# is there a way I can get my tests to run automatically as well?&lt;/p>
&lt;p>A bit of googling and configuring I can answer this as Yes.&lt;/p>
&lt;p>The nuget package called &lt;a href="https://testergiles.herokuapp.com/" target="_blank" rel="noopener noreferrer">Giles&lt;/a>
is a watcher which will rerun your tests similar to how Oliver did it with his scalar environment. Fans of Buffy the Vampire Slayer will get the joke of why a watcher is called Giles. I couldn’t get this to work with MSTest but works fine with NUnit. There is a powershell script giles.ps1 which you need to run and will update every so often with how many tests have passed or failed. However you may not see this if you are coding in Visual Studio but there is a way to get a notification.&lt;/p>
&lt;p>If you install the application &lt;a href="http://www.growlforwindows.com/gfw/" target="_blank" rel="noopener noreferrer">Growl&lt;/a>
you can get notifications from Giles which pop up and then disappear. So whatever you have on screen you can find out almost instantly if you have broken tests.&lt;/p>
&lt;p>Another thing that I wanted to configure is a way of viewing code coverage and which methods are tested and which aren’t. If you are familiar with VSTS after a build it gives you a percentage score for test coverage. I don’t find this overly useful as it doesn’t tell you what is covered and what isn’t. Also what if you want to use Github, how do you calculate the code coverage then?&lt;/p>
&lt;p>The nuget packages &lt;a href="https://www.nuget.org/packages/OpenCover/" target="_blank" rel="noopener noreferrer">OpenCover&lt;/a>
and &lt;a href="https://www.nuget.org/packages/ReportGenerator/" target="_blank" rel="noopener noreferrer">ReportGenerator&lt;/a>
allow a html report of code coverage to be produced. I created a batch script that can be run whenever you require this information.&lt;/p>
&lt;pre tabindex="0">&lt;code>[path]\OpenCover.Console.exe -target:&amp;#34;[path]\nunit3-console.exe&amp;#34; -targetargs:&amp;#34;[path]\Test.dll&amp;#34; -output:&amp;#34;[path]\coverage.xml&amp;#34; -register:user
[path]\ReportGenerator.exe &amp;#34;-reports:[path]\coverage.xml&amp;#34; &amp;#34;-targetdir:[path]&amp;#34;
&lt;/code>&lt;/pre>&lt;p>The commands are fairly straightforward, the only tricky bit is sorting out all the filepaths to the different programs.&lt;/p>
&lt;p>Now that I have all this plumbing setup time to give TDD a try and see what I can build.&lt;/p></description></item><item><title>Getting control of a codebase</title><link>https://www.funkysi1701.com/posts/2016/getting-control-of-a-codebase/</link><pubDate>Thu, 17 Nov 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/getting-control-of-a-codebase/</guid><description>&lt;p>So recently I started working on a new codebase. I will be honest when I first saw it, it was a mess. Here are a few of the things I did to try and regain control.&lt;/p>
&lt;p>I was given access to the source code on Visual Studio Team Services. However this consisted of a single commit 3 months ago. When I looked at what was running on the production server it was clear that changes were being made live with no regard for source control.&lt;/p>
&lt;p>The first thing I did was commit everything that was running live into source control.&lt;/p>
&lt;p>Next I created a SQL Server Data Tools (SSDT) project to keep track of all the database objects. Previously there was a folder with some stored procedures in it, but these did not match with what was currently running.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2015/12/sql-server-2012-management-studio-splash-screen.png?resize=300%2C204&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>I now had in source control the current state of the website and the database, so I knew I could get things back to this state if I made some bad changes.&lt;/p>
&lt;p>Lets start by looking at the website code I had. There was no solution file, the only way to look at the website was to setup my local IIS to run what was in the website folder. I could then use Visual Studio to &amp;ldquo;open&amp;rdquo; my local IIS website and attach to process to debug it.&lt;/p>
&lt;p>Next I Looked at Default.aspx to see how the website worked. The majority of the website code was stored in the database stored procedures. After the tag there was a &amp;lt;% %&amp;gt; which contained a Response.Write(RunSP.RunStoredProcedure(Parameter1, Parameter2, &amp;hellip;) command, which executed a stored procedure and the results of the stored procedure was the html code including any javascript that the webpage needed to display. I will be honest I have never seen any code like it. My guess is that the developer was secretly a DBA and wanted to make any web page changes by just changing how the stored procedures work.&lt;/p>
&lt;p>This meant that the website is not going to do anything without a backup of the database running, and meant my SSDT project was going to be vital. However the database was in a bad state, it consisted of a fair few broken objects and SSDT would not build.&lt;/p>
&lt;p>Using find I went through each of the broken database objects to find where in the code they were being used. Luckily most were referenced in commented out code, so I just removed all the broken database objects. The database could now be built. However there was a dependency on the users table of another database. (This was the developers solution to sharing logins between websites) As I was using SSDT I added a database dependency, problem solved for now.&lt;/p>
&lt;p>Next I tried publishing my database. SQL CMD encountered a parsing error. The reason for this was my SPs contained javascript eg $(document), SQL CMD uses $(DatabaseName) as variables for different database so it was getting itself confused.&lt;/p>
&lt;p>My solution was to use Find and Replace to replace all the $ with &amp;rsquo; + CHAR(36) + '&lt;/p>
&lt;p>So I now have a SSDT project that builds and publishes but still no website project.&lt;/p>
&lt;p>To get the website running from Visual Studio I started off creating a .Net 4 website project and added Entity Framework 5 and MVC 3 via nuget. I then copied all the website code into the new project, and with a bit of work I got it to build. Most of the work was relating to namespaces and referencing the correct one and moving the EF model from AppCode to a custom named folder. A bit of trial and error later I had a version of the website that could be run from Visual Studio.&lt;/p>
&lt;p>I have not deployed my new version of the website as it needs further testing. No automated testing or even a smoke test checklist currently exist.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2016/11/Visual-Studio-Team-Services.png?w=960&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>As my source code is hosted on Visual Studio Team Services (VSTS), I can get VSTS to build each commit and check I haven’t broken the build. This is not that helpful at the moment, hopefully one day I will have automated tests that can be run here as well.&lt;/p>
&lt;p>Wow, I feel like I have done loads with this code so far but there is loads more still to do. I need to understand more about the business processes behind the code with a hope to understand why some architectural decisions have been made. I want to refactor the code as much as is possible, I would like to remove much of the html/javascript from the stored procedures as I can’t see that there is any advantage to running a website like this. Please correct my if I am wrong.&lt;/p></description></item><item><title>Running Windows on Raspberry Pi</title><link>https://www.funkysi1701.com/posts/2016/windows-10-raspberry-pi-3/</link><pubDate>Thu, 05 May 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/windows-10-raspberry-pi-3/</guid><description>&lt;p>Last year you may remember me talking about playing with a Raspberry Pi. Well since then my Raspberry Pi has been sat on a desk collecting dust.&lt;/p>
&lt;p>This week I attended Leeds Sharp and the topic was &lt;strong>Running Windows on Raspberry Pi&lt;/strong> and this has inspired me again to do something with a Pi.&lt;/p>
&lt;p>But first what did I learn.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Here are a couple more of pics of last nights &lt;a href="https://twitter.com/LeedsSharp?ref_src=twsrc%5Etfw">@LeedsSharp&lt;/a> &lt;a href="https://t.co/QvlsYjNFvB">https://t.co/QvlsYjNFvB&lt;/a> &lt;a href="https://twitter.com/hashtag/RaspberryPi?src=hash&amp;amp;ref_src=twsrc%5Etfw">#RaspberryPi&lt;/a> &lt;a href="https://twitter.com/hashtag/MSIoT?src=hash&amp;amp;ref_src=twsrc%5Etfw">#MSIoT&lt;/a> &lt;a href="https://t.co/60o4wiiPSv">pic.twitter.com/60o4wiiPSv&lt;/a>&lt;/p>&amp;mdash; Richard Tasker 🇬🇧 (@ritasker) &lt;a href="https://twitter.com/ritasker/status/725970415189909504?ref_src=twsrc%5Etfw">April 29, 2016&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>I had heard that a cut down version of Windows 10 could be installed on the newer Raspberry Pi’s, but I hadn’t really understood how cut down the version of windows is. Having now seen it demonstrated the OS consists of a single page with a few menu options.&lt;/p>
&lt;p>The real power of Windows 10 IoT is when you connect remotely to it. There are a couple of ways to do this, PowerShell (check out &lt;a href="https://ms-iot.github.io/content/en-US/win10/tools/CommandLineUtils.htm" target="_blank" rel="noopener noreferrer">https://ms-iot.github.io/content/en-US/win10/tools/CommandLineUtils.htm&lt;/a>
for a few commands), and of course connecting Visual Studio to your Pi.&lt;/p>
&lt;p>When I had previously played with a Pi, it had been with bash scripts and linux commands. The beauty of installing Windows IoT is that you can write c# code, something I do in my day job so theoretically I should find it easier.&lt;/p>
&lt;p>The demonstration at Leeds Sharp was pretty impressive. If you are a fan of the Big Bang Theory you may recall Sheldon playing a Theremin. Well it is actually possible to construct a Theremin from a couple of sensors and a Raspberry Pi. The code for which is on &lt;a href="https://github.com/ritasker/IoTDemos" target="_blank" rel="noopener noreferrer">github&lt;/a>
.&lt;/p>
&lt;p>Now that I have been inspired what shall I do?&lt;/p>
&lt;p>My Raspberry Pi won’t support Windows 10 IoT, so I need to buy the latest version. I am thinking of buying a kit so I can play about with a breadboard, LEDs and resistors. Maybe not build a robot straight away but certainly try doing something that connects to the GPIO pins.&lt;/p>
&lt;p>If you have any suggestions leave a comment below.&lt;/p></description></item><item><title>In the Zone</title><link>https://www.funkysi1701.com/posts/2014/in-the-zone/</link><pubDate>Sun, 02 Nov 2014 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2014/in-the-zone/</guid><description>&lt;p>On Friday night I had the urge to fire up Visual Studio and tomorrow (Monday) I move house.&lt;/p>
&lt;p>What’s with that? Why am I in a programming mood when I have boxes to pack and shelves to take apart?&lt;/p>
&lt;p>For the last few weeks I have been too busy with other things to do much programming or when I had the time I felt more like relaxing than learning anything new.&lt;/p>
&lt;p>How do I get into the programming zone, what was it about this particular weekend that made me want to? Was it just the fact I had no time to concentrate on it, or is there some more useful factor that controls my desire to code?&lt;/p>
&lt;p>I can think of a few factors that I should make note of.&lt;/p>
&lt;ol>
&lt;li>Peace and quiet – Friday night I had the place to myself so I could concentrate and do whatever I wanted.&lt;/li>
&lt;li>Ideas – Before I started I had some ideas, why don’t I try doing x. Once I have a coding idea I need to investigate it and see where it goes.&lt;/li>
&lt;li>Break from routine – Friday night was the start of a whole week away from work, this gives me more time to forget about the daily stress of the office and think about other things.&lt;/li>
&lt;li>Goals – Work annoyed me on Friday and if I want to achieve my goal of working in development more then I need to work at it.&lt;/li>
&lt;/ol>
&lt;p>I am not sure how I can put these into practise so that I spend more time on development but we will see. One thing I want to achieve in my new home is a quiet place to concentrate and think without distractions, I have a few options which I will investigate over the next few weeks.&lt;/p>
&lt;p>Anyway need to get back to packing boxes.&lt;/p></description></item></channel></rss>