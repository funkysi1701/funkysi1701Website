<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Studio on Funky Si's Blog</title><link>https://www.funkysi1701.com/tags/visual-studio/</link><description>Recent content in Visual Studio on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 02 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/tags/visual-studio/index.xml" rel="self" type="application/rss+xml"/><item><title>Code Reviews</title><link>https://www.funkysi1701.com/posts/2018/codereviews/</link><pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/codereviews/</guid><description>&lt;p>Reviewing code is a great habit to get into. Code reviews help share knowledge between your team members and help catch bugs before they get into production. But how do you get into the habit of reviewing and avoid the we don’t have time to do this mentality?&lt;/p>
&lt;p>Visual Studio Team Services (VSTS) has some great options that can help make code reviews second nature.&lt;/p>
&lt;h4 id="pull-requests">Pull Requests&lt;a class="anchor ms-1" href="#pull-requests">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>A lot of source control systems have the concept of pull requests. This is where you request others to review your code usually in a branch and if they approve it, merge it into a main branch.&lt;/p>
&lt;p>To create a pull request in VSTS go to the Code section and select Pull Requests. Often VSTS will make a suggestion of what branch to make a pull request for, if you don’t see this just click the New Pull request button.&lt;/p>
&lt;p>Select a branch you want to merge from and a branch that should be merged into (usually you merge into master from a feature branch). Give your pull request a title and description and select who should review your code, this can either be an individual or a group of people. You can also review all the changes that will be reviewed so you can make any last minute changes before it is reviewed.&lt;/p>
&lt;p>Now if you are anything like me you want your code merged in as soon as you have created your pull request and there is nothing stopping you reviewing your own code and clicking approve and merge on your own pull request. However &lt;a href="https://docs.microsoft.com/en-us/vsts/git/branch-policies?view=vsts" target="_blank" rel="noopener noreferrer">branch policies&lt;/a>
is a way around this problem.&lt;/p>
&lt;h4 id="branch-policies">Branch Policies&lt;a class="anchor ms-1" href="#branch-policies">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h4>
&lt;p>&lt;img class="img-fluid" alt="Branch Policy" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2018/04/save-policy-changes.png?resize=599%2C901&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Branch policies allow you to specify how your code gets merged in.&lt;/p>
&lt;p>Go to the list of branches in VSTS and select branch policy and you will see a whole host of options to customise the merge process. If you do this on the master branch you will not be able to commit any changes to master without it going through a pull request.&lt;/p>
&lt;p>The first option enables you to select how many reviewers are needed on your code. If no one else works on your project best not setting this, but for everyone else setting at least one person to review your code is a great practice.&lt;/p>
&lt;p>Next you can ensure that your pull request is linked to a work item, this helps keep ensure you are actually fixing issues and not just making change for the sake of it.&lt;/p>
&lt;p>Check for comment resolution is a good setting to enable. This ensures that if your reviewer has commented about you needing to change this line here, it ensures that you do.&lt;/p>
&lt;p>Enforce merge strategy allows you to choose between fast forward merge or squash merge.&lt;/p>
&lt;p>Build validation enables the code to be built using a build definition you have configured. This is a great way to check code builds or tests pass before it gets merged in.&lt;/p>
&lt;p>The last two options allow you to specify code reviewers and third party external services.&lt;/p></description></item><item><title>How to get Zero Code Changes outside of Source Control</title><link>https://www.funkysi1701.com/posts/2017/get-zero-code-changes-outside-source-control/</link><pubDate>Mon, 13 Nov 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/get-zero-code-changes-outside-source-control/</guid><description>&lt;p>Source control is bread and butter for web developers, however not so much for SQL developers and other business people. One of my goals for the coming year is to get the whole of my team using source control processes.&lt;/p>
&lt;p>One of the arguments against using source control is there will always be a few exceptions where it won’t be used. Lets look at a few scenarios to help make the case for source control.&lt;/p>
&lt;p>&lt;strong>Scenario One&lt;/strong>&lt;/p>
&lt;p>Web Dev 1 makes a change in production to fix an issue and doesn’t use source control. Web Dev 2 is working on a new feature and makes use of source control. He is given the sign-off to deploy his new feature and in the process undoes Web Dev 1’s fix.&lt;/p>
&lt;p>Management blames Web Dev 2 as they “broke” stuff during the deployment. Web Dev 2 doesn’t understand what happened and Web Dev 1 is oblivious to the entire scenario despite in reality being part of the problem.&lt;/p>
&lt;p>&lt;strong>Scenario Two&lt;/strong>&lt;/p>
&lt;p>A SQL Dev works all night to fix a problem. He deploy to production and doesn’t notice a missed where clause due to lack of sleep.&lt;/p>
&lt;p>—&lt;/p>
&lt;p>Let’s look at these two scenarios done with the whole team buying into source control.&lt;/p>
&lt;p>&lt;strong>Scenario One&lt;/strong>&lt;/p>
&lt;p>Web Dev 1 makes a change in production to fix an issue and also commits to source control. This takes him an extra 5 minutes (if that!) Web Dev 2 is working on a new feature and makes use of source control. He is given the sign-off to deploy his new feature and in the process merges Web Dev 1’s fix before he deploys to production.&lt;/p>
&lt;p>Management is happy with Web Dev 1, nothing is broken and new functionality has made the website better not worse.&lt;/p>
&lt;p>&lt;strong>Scenario Two&lt;/strong>&lt;/p>
&lt;p>A SQL Dev works all night to fix a problem. He deploy to production and doesn’t notice a missed where clause due to lack of sleep, he also commits to source control this takes him an extra 5 minutes (if that!).&lt;/p>
&lt;p>In the morning a colleague looks through the commits made during the night and queries the missing where clause. A fix is made in source control and deployed, management and the client are unaware that a problem was created and fixed.&lt;/p>
&lt;p>—&lt;/p>
&lt;p>These are simple scenarios but I cannot think of any situation where the outcome would be better to not use source control. These examples assume no continuous deployment, adding this to the system before every team has bought into source control would cause bugs and issues all over the place.&lt;/p>
&lt;p>However with a team that is 100% behind source control continuous deployment can achieve an amazing productivity boost. After every commit code could be automatically tested, reviewed by other members of the team and deployed to test environments for further analysis. Only tested code that has been reviewed can get anywhere near production environments.&lt;/p>
&lt;p>Having said all this there are ways especially on the SQL side to mitigate loosing changes while you work on training individuals and convincing management. Before any code is deployed to production do a schema compare. If you only see changes you have made you can proceed, if you don’t shout at your team.&lt;/p>
&lt;p>&lt;strong>Advantages&lt;/strong>&lt;/p>
&lt;p>Code Reviews&lt;br>
Team awareness of what is being changed&lt;br>
History of changes&lt;br>
Smoother Deployments&lt;br>
Automation&lt;br>
Better Teamwork&lt;br>
Diff changes between different versions&lt;br>
Many more&lt;/p>
&lt;p>&lt;strong>Disadvantages&lt;/strong>&lt;/p>
&lt;p>Time to learn tools&lt;br>
Remember to commit changes&lt;br>
Technologies that use binary files harder to version control&lt;/p></description></item><item><title>In the Zone</title><link>https://www.funkysi1701.com/posts/2014/in-the-zone/</link><pubDate>Sun, 02 Nov 2014 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2014/in-the-zone/</guid><description>&lt;p>On Friday night I had the urge to fire up Visual Studio and tomorrow (Monday) I move house.&lt;/p>
&lt;p>What’s with that? Why am I in a programming mood when I have boxes to pack and shelves to take apart?&lt;/p>
&lt;p>For the last few weeks I have been too busy with other things to do much programming or when I had the time I felt more like relaxing than learning anything new.&lt;/p>
&lt;p>How do I get into the programming zone, what was it about this particular weekend that made me want to? Was it just the fact I had no time to concentrate on it, or is there some more useful factor that controls my desire to code?&lt;/p>
&lt;p>I can think of a few factors that I should make note of.&lt;/p>
&lt;ol>
&lt;li>Peace and quiet – Friday night I had the place to myself so I could concentrate and do whatever I wanted.&lt;/li>
&lt;li>Ideas – Before I started I had some ideas, why don’t I try doing x. Once I have a coding idea I need to investigate it and see where it goes.&lt;/li>
&lt;li>Break from routine – Friday night was the start of a whole week away from work, this gives me more time to forget about the daily stress of the office and think about other things.&lt;/li>
&lt;li>Goals – Work annoyed me on Friday and if I want to achieve my goal of working in development more then I need to work at it.&lt;/li>
&lt;/ol>
&lt;p>I am not sure how I can put these into practise so that I spend more time on development but we will see. One thing I want to achieve in my new home is a quiet place to concentrate and think without distractions, I have a few options which I will investigate over the next few weeks.&lt;/p>
&lt;p>Anyway need to get back to packing boxes.&lt;/p></description></item></channel></rss>