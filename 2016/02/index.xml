<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2016-02 on Funky Si's Blog</title><link>https://www.funkysi1701.com/2016/02/</link><description>Recent content in 2016-02 on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 25 Feb 2016 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/2016/02/index.xml" rel="self" type="application/rss+xml"/><item><title>Coding myself into a corner</title><link>https://www.funkysi1701.com/posts/2016/coding-myself-into-a-corner/</link><pubDate>Thu, 25 Feb 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/coding-myself-into-a-corner/</guid><description>&lt;p>I spend an awful lot of my working life adding new features and improvements to a legacy database system.&lt;/p>
&lt;p>A &lt;strong>legacy&lt;/strong> system is an old method, technology, computer system, or application program, “of, relating to, or being a previous or outdated computer system.” Often a pejorative term, referencing a system as &amp;ldquo;&lt;strong>legacy&lt;/strong>&amp;rdquo; often implies that the system is out of date or in need of replacement.&lt;/p>
&lt;p>My particular legacy system is Microsoft Access. We use Microsoft Access to provide the front end for all our internal databases. The particular technology we use is ADP files which are only supported in Access 2000, 2003 or 2010.&lt;/p>
&lt;p>Microsoft has already dropped support for Access 2000 and 2003, and support for 2010 is due to be dropped in 2020.&lt;/p>
&lt;p>So why am I coding myself into a corner? Its simple for every feature or improvement I create in Access, I increase the amount of features I need to create or port to a new front end.&lt;/p>
&lt;p>This is a very depressing thought, everything I create will need creating again. I am not saving myself work but increasing the amount of work I need to do again.&lt;/p>
&lt;p>The bad news is that my employers like almost all businesses demand results and like a good employee I have been delivering them. I have been promised the mythical “when we are quiet” you can work on rebuilding the database front end. I know this will likely never happen so what are my options.&lt;/p>
&lt;p>&lt;strong>Do nothing&lt;/strong> I have warned my managers that this work needs doing and it is up to them to give me the resources I need. This is not an acceptable option. Firstly I am not future proofing the business, 2020 will be here before we know it. Also I am not developing myself as a developer, as the only experience I am getting is with Legacy technology that has expired or will do very soon. No one wants to employ someone who only has legacy experience.&lt;/p>
&lt;p>&lt;strong>Do something&lt;/strong> I need to keep delivering results and doing what is asked of me. Like any good engineer I should be multiplying my estimates by four, meaning that I have some time that can be used for looking at the bigger picture. This is a win-win option really. Employer gets a solution that is future proof, Employee gets valuable experience in up to date technology.&lt;/p>
&lt;p>What do you think? Have you been tied to legacy technology? Why not leave a comment below.&lt;/p></description></item><item><title>Star Trek Episode Review “The Best of Both Worlds”</title><link>https://www.funkysi1701.com/posts/2016/star-trek-episode-review-the-best-of-both-worlds/</link><pubDate>Thu, 18 Feb 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/star-trek-episode-review-the-best-of-both-worlds/</guid><description>&lt;p>&lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2016/02/Picard_kidnapped_by_the_Borg.jpg" loading="lazy"
/>
&lt;/p>
&lt;ul>
&lt;li>Episode Title: &lt;strong>The Best of Both Worlds&lt;/strong>&lt;/li>
&lt;li>Star Trek Type: TNG&lt;/li>
&lt;li>Original Air Date: 18 June 1990 &amp;amp; 24 September 1990&lt;/li>
&lt;li>Written By: Michael Piller&lt;/li>
&lt;li>Directed By: Cliff Bole&lt;/li>
&lt;/ul>
&lt;p>The Borg threaten the Federation, when they kidnap Captain Picard and destroy a fleet of 39 Starships. Luckily some original thinking from Commander Riker and Lieutenant Commander Shelby saves the Federation from assimilation.&lt;/p>
&lt;p>Thoughts: I love this episode! It is probably my favourite episode in the whole of trek. I can’t think of a single scene which I don’t like.&lt;/p>
&lt;p>It is a two parter that actually works best as a two parter. The moment that Riker orders the Enterprise to fire on the Borg is great. At the time some thought that Patrick Stewart might leave the show and be replaced by Riker/Shelby. I am very glad that didn’t happen but it is interesting to ponder what that might be like.&lt;/p>
&lt;p>The Borg soundtrack in this episode is great. Ron Jones really captures the spooky threat that the Borg are. I was always disappointed that some of that didn’t continue in First Contact and when the Borg return in Voyager.&lt;/p>
&lt;p>The episode has a cracking pace. From the moment the Borg first attack the Enterprise to the moment the Borg ship explodes the show doesn’t slow down.&lt;/p>
&lt;pre tabindex="0">&lt;code>I am Locutus… of Borg. Resistance… is futile.
Your life, as it has been… is over. From this time forward… you will service… us.
&lt;/code>&lt;/pre>&lt;p>Commander Shelby is a great character that enhances the episode and introduces conflict between characters, particularly Riker.&lt;/p>
&lt;p>I have heard that Riker’s thoughts about his career was a mirror to writer Michael Piller’s thoughts about leaving the show. Luckily for us he stayed.&lt;/p>
&lt;p>In a future episode of DS9 Worf comments that he felt there was nothing that they couldn’t do during this time. I have to agree the tag team of him and Data is a great one. If I want rescuing it would be Data and Worf that I would want.&lt;/p>
&lt;p>My good friends at &lt;a href="http://www.trekmate.org.uk/the-best-of-both-worlds-tng-s3-e26-review-the-battle-bridge/" target="_blank" rel="noopener noreferrer">Trekmate&lt;/a>
have just reviewed part one, why not have a listen?&lt;/p></description></item><item><title>My git repository is too large!</title><link>https://www.funkysi1701.com/posts/2016/my-git-repository-is-too-large/</link><pubDate>Thu, 11 Feb 2016 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2016/my-git-repository-is-too-large/</guid><description>&lt;p>Today I did a clone of one of my git repositories and it took ages to download. Looking into what got downloaded it was easy to see why. The .git folder was over 500Mb in size.&lt;/p>
&lt;p>I know how this has happened. This repository was created in 2013 and has been used by me as a dumping ground for lots of things related to the code which never should have been committed.&lt;/p>
&lt;p>Since 2013 I have learnt a lot more about coding and git so the current version of the files in git isn’t too bad. But git keeps the history of changes for every file so bad practices like this are kept.&lt;/p>
&lt;p>What can I do about this? Well what does google suggest? I found this &lt;a href="http://stevelorek.com/how-to-shrink-a-git-repository.html" target="_blank" rel="noopener noreferrer">blog post&lt;/a>
.&lt;/p>
&lt;p>It suggests ways of listing all the large files that are stored in git and a way to remove them. As I am the only person that regularly commits to this repository I see no problem with giving it a go.&lt;/p>
&lt;p>I will summarise the steps here.&lt;/p>
&lt;pre tabindex="0">&lt;code>git clone url
&lt;/code>&lt;/pre>&lt;p>Now you need all the remote branches so there is a bash script to run&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do
git branch –track ${branch##*/} $branch
done
&lt;/code>&lt;/pre>&lt;p>Another bash script then lists the top 10 large files&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
#set -x
# Shows you the largest objects in your repo’s pack file.
# Written for osx.
#
# @see http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
# @author Antony Stubbs
# set the internal field spereator to line break, so that we can iterate easily over the verify-pack output
IFS=$’\n’;
# list all objects including their size, sort by size, take top 10
objects=`git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head`
echo “All sizes are in kB. The pack column is the size of the object, compressed, inside the pack file.”
output=“size,pack,SHA,location”
for y in $objects do
# extract the size in bytes
size=$((`echo $y | cut -f 5 -d ‘ ‘`/1024))
# extract the compressed size in bytes
compressedSize=$((`echo $y | cut -f 6 -d ‘ ‘`/1024))
# extract the SHA
sha=`echo $y | cut -f 1 -d ‘ ‘`
# find the objects location in the repository tree
other=`git rev-list –all –objects | grep $sha`
#lineBreak=`echo -e “\n”`
output=“${output}\n${size},${compressedSize},${other}”
done
echo -e $output
&lt;/code>&lt;/pre>&lt;p>After running the script you will see details of your largest files. I had *.msi and *.exe files in the mix. To remove them run the following, where filename is the path to the file that needs removing.&lt;/p>
&lt;pre tabindex="0">&lt;code>git filter-branch –tag-name-filter cat –index-filter ‘git rm -r –cached –ignore-unmatch filename’ –prune-empty -f — –all
&lt;/code>&lt;/pre>&lt;p>To reclaim the disk space run the following commands&lt;/p>
&lt;pre tabindex="0">&lt;code>rm -rf .git/refs/original/
git reflog expire –expire=now –all
git gc –prune=now
git gc –aggressive –prune=now
&lt;/code>&lt;/pre>&lt;p>Now push your changes back to the remote server.&lt;/p>
&lt;pre tabindex="0">&lt;code>git push origin –force –all
git push origin –force –tags
&lt;/code>&lt;/pre>&lt;p>Now if you do a clone it will be much smaller than before and you can get back to coding much quicker, without having to wait.&lt;/p></description></item></channel></rss>