<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017 on Funky Si's Blog</title><link>https://www.funkysi1701.com/2017/</link><description>Recent content in 2017 on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 07 Aug 2017 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/2017/index.xml" rel="self" type="application/rss+xml"/><item><title>Android App Development and the Visual Studio Mobile Centre</title><link>https://www.funkysi1701.com/posts/android-app-development-and-the-visual-studio-mobile-centre/</link><pubDate>Mon, 07 Aug 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/android-app-development-and-the-visual-studio-mobile-centre/</guid><description>&lt;p>For the past week or so I have been playing around with Xamarin and creating an android app.&lt;/p>
&lt;p>Well I now have an app in the Google Play Store. Check out &lt;a href="https://play.google.com/store/apps/dev?id=6148298088834956775" target="_blank" rel="noopener noreferrer">https://play.google.com/store/apps/dev?id=6148298088834956775&lt;/a>
. &lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/08/Screenshot_20170806-190053.png?resize=169%2C300&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Before you rush and download the app I must warn you that it doesn’t do much yet. It displays some content that is on my website and there are a few links to allow sharing of content. I have some ideas to display content from my blog and allow sharing. I also have some other ideas for apps that might actually be useful to people that are not me. If you have ideas or feature requests do let me know.&lt;/p>
&lt;p>Ok how did I go about creating this app and getting it in the app store?&lt;/p>
&lt;p>Xamarin is now part of Visual Studio so step one is install all the Xamarin features to Visual Studio and build an app.&lt;/p>
&lt;p>Next I wanted to monitor my app. Now I know Application Insights doesn’t support apps so what tools are out there? HockeyApp is something I had heard of but they are in the process of being replaced with &lt;a href="https://appcenter.ms/apps" target="_blank" rel="noopener noreferrer">Visual Studio Mobile Centre&lt;/a>
.&lt;/p>
&lt;p>It was relatively easy to hook up my app to Visual Studio Mobile Centre. First install the required nuget packages. Then add using statements and the following line to your MainActivity.cs file (these instructions are available on the Mobile Centre)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile;
&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Analytics;
&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Crashes;
&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Distribute;
&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Azure.Mobile.Push;
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">MobileCenter.Start(&lt;span style="color:#e6db74">&amp;#34;[Unique ID]&amp;#34;&lt;/span>,&lt;span style="color:#66d9ef">typeof&lt;/span>(Analytics), &lt;span style="color:#66d9ef">typeof&lt;/span>(Crashes), &lt;span style="color:#66d9ef">typeof&lt;/span>(Distribute), &lt;span style="color:#66d9ef">typeof&lt;/span>(Push));
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can connect the Mobile Centre to your source code (VSTS in my case) and get it to run a build for every commit.&lt;/p>
&lt;p>One complexity of the build is that you need to supply a keystore file (basically a certificate to digitally sign your app). I found the best way to do this was to use Visual Studio to create the file.&lt;/p>
&lt;p>In VS2017 there is a option called Archive Manager under the tools menu. In here click the distribute button and select Ad-hoc. In the signing identity section you can create a keystore file. Enter a few details and a keystore file will be created in AppData\Local\Xamarin\Mono for Android\Keystore[keystore name][keystore name.keystore]&lt;/p>
&lt;p>Once you have added the keystore file to your build you can enable the distribute option. Now you will get an email after every build with a link to install your app.&lt;/p>
&lt;p>Every time your app crashes the details will be logged in the crashes section for you to explore and fix the issues.&lt;/p>
&lt;p>The Analytics section allows you to explore how your app is being used. You can also add Analytics.TrackEvent(&amp;ldquo;Feature X&amp;rdquo;) to measure the usage of different features.&lt;/p>
&lt;p>There are more things you can do which I will explore more at another time along with how to get your app into the Google Play Store.&lt;/p></description></item><item><title>Async and Await</title><link>https://www.funkysi1701.com/posts/async-and-await/</link><pubDate>Mon, 24 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/async-and-await/</guid><description>&lt;p>For a while the Async and Await commands in c# have confused me.&lt;/p>
&lt;p>Like most things the best way to learn about something is to use it in a real world example. I am currently adding an email alert feature to a website. This is an ideal example of something that would benefit from Asynchronous programming. There is no need for the webpage to wait to send 1000s of emails, lets just send a call to get started and allow the browser to carry on as normal.&lt;/p>
&lt;p>This is my first try at using async and await so feel free to suggest best practises in the comments.&lt;/p>
&lt;p>Lets start with a Send method in my EmailController.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> ActionResult Send(&lt;span style="color:#66d9ef">int&lt;/span> id, &lt;span style="color:#66d9ef">int&lt;/span> pageId, &lt;span style="color:#66d9ef">int&lt;/span> userID)
{
&lt;span style="color:#66d9ef">if&lt;/span> (!Authorize.checkPageIsAuthorised(userID, (Authorize.PageIds)pageId))
{
&lt;span style="color:#66d9ef">return&lt;/span> Redirect(&lt;span style="color:#e6db74">&amp;#34;/login&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
Task&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; t = SendNotifications(id,userID);
&lt;span style="color:#66d9ef">return&lt;/span> Redirect(Request.UrlReferrer.ToString());
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This simply checks to see if you have permission to the page. If not redirects to the login page otherwise it makes a method call and redirects back to the page it came from.&lt;/p>
&lt;p>Lets have a look at that method call in more detail.&lt;/p>
&lt;p>Task&lt;string> t = SendNotification(id, userid);&lt;/p>
&lt;p>SendNotification doesn’t return a normal string it returns a Task&lt;string>, so lets look at how we are creating this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; SendNotifications(&lt;span style="color:#66d9ef">int&lt;/span> id,&lt;span style="color:#66d9ef">string&lt;/span> type,&lt;span style="color:#66d9ef">int&lt;/span> userid)
{
&lt;span style="color:#75715e">//logic ommitted
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> ef.SendEmail(model, emailHtmlBody);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;OK&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The return type is set to Task but it has the aysnc keyword appended to it. It also makes a call with the await keyword.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task SendEmail(EmailModel model,&lt;span style="color:#66d9ef">string&lt;/span> emailHtmlBody)
{
&lt;span style="color:#75715e">//logic removed
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> smtp.SendMailAsync(message);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So that is it. My first bit of code that uses Async and Await. My controller calls a method asynchronously which then calls another method asynchronously which sends emails asynchronously.&lt;/p>
&lt;p>Async – This enables the Await keyword to be used in the method&lt;/p>
&lt;p>Await – This is where things get asynchronous. The await keyword allows the code to wait asynchronously for the long running code to complete.&lt;/p></description></item><item><title>Writing your first test</title><link>https://www.funkysi1701.com/posts/writing-your-first-test/</link><pubDate>Mon, 10 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/writing-your-first-test/</guid><description>&lt;p>Whenever I write a new test I have to think how best to do it. Hopefully I can summarise a few tips here to help get started.&lt;/p>
&lt;h3 id="arrange-act-assert">Arrange Act Assert&lt;a class="anchor ms-1" href="#arrange-act-assert">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>The first thing I think about when writing a test is Arrange, Act, Assert. Arrange, Act, Assert is a pattern for writing the tests.&lt;/p>
&lt;p>&lt;strong>Arrange&lt;/strong> – This gets things in order ready to execute the test.&lt;/p>
&lt;p>&lt;strong>Act&lt;/strong> – This executes the method you want to test.&lt;/p>
&lt;p>&lt;strong>Assert&lt;/strong> – This compares the value produced in the Act step with a known value typically with a method similar to the following&lt;/p>
&lt;p>Assert.AreEqual(expected value, actual value)&lt;/p>
&lt;p>Say for example you wanted to test a method called ReturnsTrue() which does nothing but returns a value of true. This method is in a class called ReturnsTrueClass&lt;/p>
&lt;p>The Arrange step in this example would be.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">ReturnsTrueClass t = &lt;span style="color:#66d9ef">new&lt;/span> ReturnsTrueClass();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Act step in this example would be.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">var&lt;/span> result = t.ReturnTrue();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Assert step in this example would be.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">Assert.AreEqual(&lt;span style="color:#66d9ef">true&lt;/span>, result);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a stupidly simple example but hopefully you get the idea of how you can build all your tests with these three steps.&lt;/p>
&lt;p>Recently I saw a tweet complaining that someone has mixed up expected and actual in the Assert statement.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">There is a minor but special hell reserved for those who mix up the expected and actual parameters in Assert.Equals&lt;/p>&amp;mdash; Keith Williams (@zogface) &lt;a href="https://twitter.com/zogface/status/882737770095149056?ref_src=twsrc%5Etfw">July 5, 2017&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>At first glance this probably isn’t the worst mistake to make as if your tests are all passing actual and expected are the same.&lt;/p>
&lt;p>However tests will fail, that is the whole point of them, you can then fix bits of code. If you have mixed up actual and expected it adds extra time to debugging and figuring out what values are produced from your code and what you are expecting it to produce. It may be your test uses a mocking framework and somewhere in there, there is an issue, with mixed up expected/actual you may assume a problem in your code rather than the test.&lt;/p>
&lt;p>Also, how do you make such an error? When I type Assert.AreEquals() in Visual Studio, Visual Studio tells me what each parameter does, it takes a matter of seconds to do this, just by hovering over the code.&lt;/p>
&lt;p>One last tip to say about tests. Write your tests to test the behaviour of your application.&lt;/p></description></item><item><title>Uploading Files to AWS</title><link>https://www.funkysi1701.com/posts/uploading-files-to-aws/</link><pubDate>Mon, 03 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/uploading-files-to-aws/</guid><description>&lt;p>I am a fan of Azure but today I have been looking at AWS. Specifically how to upload and download files.&lt;/p>
&lt;p>AWS S3 stores files in Buckets. I already had an AWS S3 account setup with a Bucket. I am going to assume you have got a bucket setup and concentrate on the code to get files in and out.&lt;/p>
&lt;p>First step is to use nuget to install the AWS packages. In nuget the packages you want are called AWSSDK.Core and AWSSDK.S3.&lt;/p>
&lt;p>The using statements you want to use are called Amazon.S3 and Amazon.S3.Transfer, not sure why this doesn’t match nuget, this difference caught me out a couple of times.&lt;/p>
&lt;p>Now to the code that uploads files&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">AmazonS3Client AWSclient = &lt;span style="color:#66d9ef">new&lt;/span> AmazonS3Client(accessKeyID, secretAccessKeyID, Amazon.RegionEndpoint.EUWest1);
TransferUtility fileTransferUtility = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtility(AWSclient);
&lt;span style="color:#66d9ef">using&lt;/span> (FileStream streamWriter = &lt;span style="color:#66d9ef">new&lt;/span> FileStream(path, FileMode.Open))
{
TransferUtilityUploadRequest fileTransferUtilityRequest = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtilityUploadRequest
{
BucketName = &lt;span style="color:#e6db74">&amp;#34;flawlessimages&amp;#34;&lt;/span>,
InputStream = streamWriter,
Key = fileName
};
fileTransferUtility.Upload(fileTransferUtilityRequest);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lets break it down and look at what it does.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">AmazonS3Client AWSclient = &lt;span style="color:#66d9ef">new&lt;/span> AmazonS3Client(accessKeyID, secretAccessKeyID, Amazon.RegionEndpoint.EUWest1);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates an instance of AmazonS3Client, we are passing the Access Key and Secret Access Key both of which can be found from your Amazon S3 account My Security Credentials section. Amazon.RegionEndpoint.EUWest1 specifies the amazon data centres that your bucket is located in.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">TransferUtility fileTransferUtility = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtility(AWSclient);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates an instance of TransfterUtility using the AmazonS3Client instance we created in the previous step.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">&lt;span style="color:#66d9ef">using&lt;/span> (FileStream streamWriter = &lt;span style="color:#66d9ef">new&lt;/span> FileStream(path, FileMode.Open))
{
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This opens up a filestream from a files path and specifies that the file should be opened.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">TransferUtilityUploadRequest fileTransferUtilityRequest = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtilityUploadRequest
{
BucketName = &lt;span style="color:#e6db74">&amp;#34;flawlessimages&amp;#34;&lt;/span>,
InputStream = streamWriter,
Key = fileName
};
fileTransferUtility.Upload(fileTransferUtilityRequest);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This last step specifies which bucket to upload to, what input stream to upload and the Key to use. Key is just AWS way of referring to files, more commonly referred to as the filename.&lt;/p>
&lt;p>This is all you need to do to upload a file to your Bucket. The file will be located at &lt;a href="https://s3-eu-west-1.amazonaws.com/[bucketname]/[filename]" target="_blank" rel="noopener noreferrer">https://s3-eu-west-1.amazonaws.com/[bucketname]/[filename]&lt;/a>
, however by default it will not be downloadable until you set Read permission to everyone, once you do that anyone who has the link will be able to download your file.&lt;/p>
&lt;p>This is the same permission level as any file you have on your webserver, however AWS has a better way.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">&lt;span style="color:#66d9ef">using&lt;/span> (s3Client = &lt;span style="color:#66d9ef">new&lt;/span> AmazonS3Client(accessKeyID, secretAccessKeyID, Amazon.RegionEndpoint.USEast1))
{
GetPreSignedUrlRequest request1 = &lt;span style="color:#66d9ef">new&lt;/span> GetPreSignedUrlRequest
{
BucketName = bucketName,
Key = filename,
Expires = DateTime.Now.AddMinutes(&lt;span style="color:#ae81ff">5&lt;/span>)
};
urlString = s3Client.GetPreSignedURL(request1);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we are generating a url to download the file, but we are specifying that it is only valid for 5 minutes. This means that if you share the url it will only work for 5 minutes, after that AWS will give an access denied message.&lt;/p>
&lt;p>This is much better security than you have on a typical web server, and easy to implement, every time a user clicks on a download link you generate a new presigned url and send the download to the browser, as long as this process doesn’t take longer than 5 minutes the user will never know.&lt;/p></description></item><item><title>Using Azure WebJobs to Automate Stuff</title><link>https://www.funkysi1701.com/posts/using-azure-webjobs-to-automate-stuff/</link><pubDate>Mon, 26 Jun 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/using-azure-webjobs-to-automate-stuff/</guid><description>&lt;p>I keep hearing about Azure WebJobs but I have never used them. Time to change this.&lt;/p>
&lt;p>WebJobs are a feature of Azure App Service that can run a script at a specific time. In my case I would like to hit a specific url of my website at the same time every day.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="WebJobs" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/06/addkeepalivewebjob.png?resize=313%2C615&amp;amp;ssl=1" loading="lazy"
/>
To the right you can see an example of the WebJobs form on the Azure portal that you need to fill in.&lt;/p>
&lt;p>You need to supply a name for your webjob.&lt;/p>
&lt;p>You need to upload the script that will run in my case I used a powershell script. My script consisted of which basically just loads the url specified.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">$progressPreference = &lt;span style="color:#e6db74">&amp;#34;silentlyContinue&amp;#34;&lt;/span>;
$result = Invoke-WebRequest -Uri (&lt;span style="color:#e6db74">&amp;#34;https://www.google.com&amp;#34;&lt;/span>) -Method Get -UseBasicParsing;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Type refers to if your job will be triggered or run continuously, I want it to be triggered.&lt;/p>
&lt;p>Triggers refers to if you want it to be scheduled or manual, something that you can run on an ad hoc basis. I of course want scheduled.&lt;/p>
&lt;p>If you are familiar with the linux CRON then the next box will make sense to you for everyone else I will try and make sense of it. The box consists of 6 numbers which can either have a value or a *. The numbers correspond to the following {second} {minute} {hour} {day} {month} {day of the week}.&lt;/p>
&lt;p>A hourly job would be expressed as 0 0 * * * *, ie every day of week, every month, every day, every hour and only when minute and second equals zero. For more help with this check out the &lt;a href="https://docs.microsoft.com/en-us/azure/app-service-web/web-sites-create-web-jobs#CreateScheduledCRON" target="_blank" rel="noopener noreferrer">MSDN docs&lt;/a>
about it. I want to use 0 30 21 * * * to run daily at 9.30pm.&lt;/p>
&lt;p>That’s it everything setup, now time to wait and see if it works.&lt;/p>
&lt;p>&lt;strong>Oh no!&lt;/strong>&lt;/p>
&lt;p>It failed to run at the specified time.&lt;/p>
&lt;p>The reason for this is the scheduler requires the feature Always On to be turned on which is not available in the free App Service. Before you reach for your wallets, I found a solution on this &lt;a href="https://tomssl.com/2016/12/20/how-to-get-azure-webjobs-to-run-indefinitely-for-free/" target="_blank" rel="noopener noreferrer">blog post&lt;/a>
that allows them to run on the free tier.&lt;/p>
&lt;p>The thinking behind this solution is you need to keep the website alive throughout the day so Tom has created a script that does this. His script can be found on his blog or on his &lt;a href="https://github.com/TomChantler/Self-KeepAlive" target="_blank" rel="noopener noreferrer">github page&lt;/a>
.&lt;/p>
&lt;p>Set this script up to run every 5 minutes (0 */5 * * * *) like the example above.&lt;/p>
&lt;p>The nextthing you need to do is create a Custom connection string in the Application Settings blade called SecretThing. Tom’s script references this to access the website and keep it alive. The password you need to put in SecretThing can be found in you publish profile (downloaded from the Overview blade in the Azure portal). For more details and a better explanation check out &lt;a href="https://tomssl.com/2016/12/20/how-to-get-azure-webjobs-to-run-indefinitely-for-free/" target="_blank" rel="noopener noreferrer">Tom’s blog&lt;/a>
.&lt;/p>
&lt;p>One last thing to mention about WebJobs is that you can see details about when they have run at https://[YourWebAppName].scm.azurewebsites.net/azurejobs/#/jobs and this can be a great place to help debug your scripts.&lt;/p></description></item><item><title>Fiddler and APIs</title><link>https://www.funkysi1701.com/posts/fiddler-and-apis/</link><pubDate>Mon, 19 Jun 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/fiddler-and-apis/</guid><description>&lt;p>A while ago I blogged about &lt;a href="https://www.funkysi1701.com/2017/04/17/automation-promotion/">promoting&lt;/a>
my blog with Buffer. At the time I made use of the nuget package &lt;a href="https://www.nuget.org/packages/BufferAPI/" target="_blank" rel="noopener noreferrer">BufferAPI&lt;/a>
but lets look at some improvements I can make.&lt;/p>
&lt;p>The BufferAPI package worked great from my console app, but when I tried to use it from a Controller in an MVC app I never got it to work. Lets look at the API docs and see if I can rewrite it.&lt;/p>
&lt;p>There are two main types of API calls GET which gets data from the server and POST which posts data to the server. These come from the types of HTTP requests.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Alt Text" src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wozrfdoqvtjaoxs7j1v.jpg" loading="lazy"
/>
&lt;/p>
&lt;p>I quickly figured out how to use the GET API call to authenticate using &lt;a href="https://api.bufferapp.com/1/profiles.json?access_token=XXXX" target="_blank" rel="noopener noreferrer">https://api.bufferapp.com/1/profiles.json?access_token=XXXX&lt;/a>
&lt;/p>
&lt;p>However POST was defeating me. That was until I remembered &lt;a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener noreferrer">Fiddler&lt;/a>
.&lt;/p>
&lt;p>I had heard Troy Hunt (and others) talk of using Fiddler to examine what data is being passed among websites. Troy uses it to do a man in the middle test to see what information can be stolen.&lt;/p>
&lt;p>It is really easy to setup, install Fiddler, click yes to a few security warnings and you can see what information is being passed from your code to remote APIs.&lt;/p>
&lt;p>Once I had Fiddler installed I could compare what information is being passed between a successful API call using the BufferAPI nuget package and an unsuccessful API call using my code.&lt;/p>
&lt;p>Fiddler also showed that passing my authentication token in a POST request is much better. Despite both GET and POST being encrypted when using HTTPS, anything at either end that logs URLs will have a log of your username and password.&lt;/p>
&lt;p>If you have not tried Fiddler, give it a try especially if you are doing things with API calls.&lt;/p></description></item><item><title>How do I add Power BI data to a webpage?</title><link>https://www.funkysi1701.com/posts/how-do-i-add-power-bi-data-to-a-webpage/</link><pubDate>Mon, 12 Jun 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/how-do-i-add-power-bi-data-to-a-webpage/</guid><description>&lt;p>Last week I talked about &lt;a href="https://www.funkysi1701.com/2017/06/05/businessintelligence/">Power BI&lt;/a>
, what it is and some of the different services you can use with it. This week lets add some of that data to a simple web page.&lt;/p>
&lt;p>For this example I am going to add the google analytics data from this website to this page.&lt;/p>
&lt;p>First login to your Power BI &lt;a href="https://app.powerbi.com/" target="_blank" rel="noopener noreferrer">https://app.powerbi.com/&lt;/a>
&lt;/p>
&lt;p>Click the get data link at the bottom left.&lt;/p>
&lt;p>Click My Organisation to bring up the app search box.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Alt Text" src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46c1lyxy053xcq66fowf.jpg" loading="lazy"
/>
&lt;/p>
&lt;p>Click the Apps tab and search for “google” in the search box, you should then see Google Analytics, click into this and then click the get it now button.&lt;/p>
&lt;p>Log into your google account. If you have multiple google accounts I found it worked best to sign out of all of them or run this in an incognito window.&lt;/p>
&lt;p>Once you are signed in you should see a list of the different google analytics data you have, select the one you want to use and click import.&lt;/p>
&lt;p>Power BI will then go away and start loading the data.&lt;/p>
&lt;p>Once loaded go to Reports and select the Google Analytics that has been loaded. If you have more than one, it is a good idea to rename each one eg Corporate Site Google Analytics, Blog Google Analytics so you won’t get mixed up.&lt;/p>
&lt;p>In the file menu select Publish to web and agree that you are OK for this to be made public.&lt;/p>
&lt;p>You will then be given a piece of HTML code that starts with &amp;lt;iframe copy this onto your web page. Reload your webpage and you should see something similar to mine below.&lt;/p>
&lt;p>It should be noted that while you can but the webpage containing the iframe behind a login page, the data could still be accessed if you knew the url contained within the iframe, this is why the link can be emailed and continue to work.&lt;/p></description></item></channel></rss>