<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017-12 on Funky Si's Blog</title><link>https://www.funkysi1701.com/2017/12/</link><description>Recent content in 2017-12 on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 28 Dec 2017 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/2017/12/index.xml" rel="self" type="application/rss+xml"/><item><title>Looking back at 2017</title><link>https://www.funkysi1701.com/posts/2017/looking-back-at-2017/</link><pubDate>Thu, 28 Dec 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/looking-back-at-2017/</guid><description>&lt;p>As 2017 starts to draw to a close let’s look at some of the highlights from the past year.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Edward" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2015/07/DSC_0376-e1510563039193-225x300.jpg?resize=225%2C300&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;ol>
&lt;li>Edward&lt;/li>
&lt;/ol>
&lt;p>In November I became a father again and celebrated the arrival of Edward into the world. Before the birth I was worried how well my first son James would adapt to the new arrival but I am happy to say I didn’t need to, he mostly ignores the new arrival.&lt;/p>
&lt;ol start="2">
&lt;li>Star Trek&lt;/li>
&lt;/ol>
&lt;p>In September the latest Star Trek TV series Discovery arrived on Netflix. I have been very positive so far about the show, I am still positive however there are things that annoy me about the new show, however I am keen to see the next episode each week so they are definitely doing something right.&lt;/p>
&lt;ol start="3">
&lt;li>Office move&lt;/li>
&lt;/ol>
&lt;p>In May I helped my employer move to brand new &lt;a href="https://funkysi1701.com/office-move" target="_blank" rel="noopener noreferrer">offices&lt;/a>
. This was a lot of hard work, but everything went as planned and our new home is great.&lt;/p>
&lt;ol start="4">
&lt;li>Side projects &lt;img class="img-fluid" alt="Google Play" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/08/googleplay.jpg?resize=300%2C300&amp;amp;ssl=1" loading="lazy"
/>
&lt;/li>
&lt;/ol>
&lt;p>I blogged in February about having a side project but it wasn’t until later in the year that this solidified into what I am working on now. It started as a way to understand &lt;a href="https://funkysi1701.com/interfaces" target="_blank" rel="noopener noreferrer">interfaces&lt;/a>
this then led to learning Xamarin and creating an android app to help promote this blog. Troy Hunt expanded his HIBP API to include passwords that have been in data breaches, I then started working on &lt;a href="https://funkysi1701.com/pwned-pass--available-from-the-play-store" target="_blank" rel="noopener noreferrer">pwned passwords&lt;/a>
which is a simple android frontend for this.&lt;/p>
&lt;ol start="5">
&lt;li>Learning R&lt;/li>
&lt;/ol>
&lt;p>In Feb I also experimented with a new programming language &lt;a href="https://funkysi1701.com/learning-r" target="_blank" rel="noopener noreferrer">R&lt;/a>
. It started with a problem about converting exchange rates and ended with a SQL stored procedure that executed some R code, I still want to learn lots more but it was a good example of the sorts of thing you can build with R.&lt;/p>
&lt;ol start="6">
&lt;li>DNS programmatically&lt;/li>
&lt;/ol>
&lt;p>One of my most successful blogs was about how you can create &lt;a href="https://dev.to/funkysi1701/creating-dns-records-programmatically-26lp" target="_blank" rel="noopener noreferrer">dns&lt;/a>
records within your application eg sites that have yourname.domain in the url. It was a great chance to look at how dns works and learn more about what azure can do to manage this. I want to expand on this and build something.&lt;/p>
&lt;p>So that was 2017, for some ideas about what 2018 might have in store for me look out for my next blog post.&lt;/p></description></item><item><title>Getting started with Azure Table Storage</title><link>https://www.funkysi1701.com/posts/2017/azure-table-storage/</link><pubDate>Sun, 17 Dec 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/azure-table-storage/</guid><description>&lt;p>Azure Table storage is cheap way to store data, however it has some drawbacks that you should be aware of.&lt;/p>
&lt;p>Azure Table storage is a simple way to store NoSQL data with key/attribute pairs. I am very familiar with storing data in SQL databases and would still choose SQL over Table storage, however Table storage is significantly cheaper so could be worth investigating depending on your project.&lt;/p>
&lt;p>&lt;a href="https://www.troyhunt.com/working-with-154-million-records-on/" target="_blank" rel="noopener noreferrer">Troy Hunt&lt;/a>
makes use of Table storage for his Have I been pwned? website so there are projects out there that make use of it to great affect.&lt;/p>
&lt;p>To work with Table storage you need to use a nuget package &lt;strong>WindowsAzure.Storage&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Install-Package WindowsAzure.Storage&lt;/strong>&lt;/p>
&lt;p>To load data from a Table in Azure Table storage I use the following code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>CloudStorageAccount storageAccount = CloudStorageAccount.Parse(connectionString);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CloudTableClient tableClient = storageAccount.CreateCloudTableClient();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CloudTable table = tableClient.GetTableReference(&lt;span style="color:#e6db74">&amp;#34;tablename&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TableOperation retrieveOperation = TableOperation.Retrieve&amp;lt;Entity&amp;gt;(PartitionKey, Rowkey);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>table.CreateIfNotExists();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TableResult retrievedResult = table.Execute(retrieveOperation);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Example eg = &lt;span style="color:#66d9ef">new&lt;/span> Example();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (retrievedResult.Result != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eg.ID = ((Entity)retrievedResult.Result).Id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eg.Date = ((Entity)retrievedResult.Result).Date;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> eg;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You need to create a class (called Entity in the example above) derived from TableEntity which defines the Partitionkey and Rowkey, plus and other columns you want to store in table storage. The row key and partition key uniquely identify the data in the table, think of this as the primary key of the table if you are used to SQL. This class must also contain a parameterless constructor.&lt;/p>
&lt;p>This is the only way to retrieve data, using the partitionkey and rowkey. If you want to retrieve a specific piece of data you would need to retrieve all rows and then search them for what you need. For me this is not a big problem as I only have 150 rows but if you have millions of rows you may need to think carefully how to use this.&lt;/p>
&lt;p>To save data I use a very similar piece of code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>CloudStorageAccount storageAccount = CloudStorageAccount.Parse(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CloudTableClient tableClient = storageAccount.CreateCloudTableClient();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CloudTable table = tableClient.GetTableReference(&lt;span style="color:#e6db74">&amp;#34;tablename&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Entity post = &lt;span style="color:#66d9ef">new&lt;/span> Entity(ID, DateTime.Now);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TableOperation insertOperation = TableOperation.InsertOrReplace(post);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>table.CreateIfNotExists();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>table.Execute(insertOperation);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I create a Entity object and then pass this as a parameter into the InsertOrReplace method.&lt;/p>
&lt;p>To delete data it is also very similar, you create an entity object and pass this as a parameter to the Delete method.&lt;/p>
&lt;p>When debugging my table storage code I found the &lt;a href="https://azure.microsoft.com/en-gb/features/storage-explorer/" target="_blank" rel="noopener noreferrer">Azure Storage Explorer&lt;/a>
very useful for seeing what data actually existed in the table and what might be throwing an error, usually something wrong with my Entity.&lt;/p>
&lt;p>I mentioned earlier that Table Storage was cheaper than SQL Azure. Well for my simple playing about with things I have found my monthly charge of £10+ has been reduced to £1+ If I were to build anything that is more than just me learning about how it works I would probably continue to use SQL but for the cost of learning new tech it is well worth giving table storage a try.&lt;/p></description></item></channel></rss>