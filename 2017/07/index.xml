<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017-07 on Funky Si's Blog</title><link>https://www.funkysi1701.com/2017/07/</link><description>Recent content in 2017-07 on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 24 Jul 2017 20:00:45 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/2017/07/index.xml" rel="self" type="application/rss+xml"/><item><title>Async and Await</title><link>https://www.funkysi1701.com/posts/2017/async-and-await/</link><pubDate>Mon, 24 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/async-and-await/</guid><description>&lt;p>For a while the Async and Await commands in c# have confused me.&lt;/p>
&lt;p>Like most things the best way to learn about something is to use it in a real world example. I am currently adding an email alert feature to a website. This is an ideal example of something that would benefit from Asynchronous programming. There is no need for the webpage to wait to send 1000s of emails, lets just send a call to get started and allow the browser to carry on as normal.&lt;/p>
&lt;p>This is my first try at using async and await so feel free to suggest best practises in the comments.&lt;/p>
&lt;p>Lets start with a Send method in my EmailController.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> ActionResult Send(&lt;span style="color:#66d9ef">int&lt;/span> id, &lt;span style="color:#66d9ef">int&lt;/span> pageId, &lt;span style="color:#66d9ef">int&lt;/span> userID)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!Authorize.checkPageIsAuthorised(userID, (Authorize.PageIds)pageId))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Redirect(&lt;span style="color:#e6db74">&amp;#34;/login&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Task&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; t = SendNotifications(id,userID);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Redirect(Request.UrlReferrer.ToString());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This simply checks to see if you have permission to the page. If not redirects to the login page otherwise it makes a method call and redirects back to the page it came from.&lt;/p>
&lt;p>Lets have a look at that method call in more detail.&lt;/p>
&lt;p>Task&lt;string> t = SendNotification(id, userid);&lt;/p>
&lt;p>SendNotification doesn’t return a normal string it returns a Task&lt;string>, so lets look at how we are creating this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; SendNotifications(&lt;span style="color:#66d9ef">int&lt;/span> id,&lt;span style="color:#66d9ef">string&lt;/span> type,&lt;span style="color:#66d9ef">int&lt;/span> userid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//logic ommitted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> ef.SendEmail(model, emailHtmlBody);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;OK&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The return type is set to Task but it has the aysnc keyword appended to it. It also makes a call with the await keyword.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task SendEmail(EmailModel model,&lt;span style="color:#66d9ef">string&lt;/span> emailHtmlBody)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//logic removed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> smtp.SendMailAsync(message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So that is it. My first bit of code that uses Async and Await. My controller calls a method asynchronously which then calls another method asynchronously which sends emails asynchronously.&lt;/p>
&lt;p>Async – This enables the Await keyword to be used in the method&lt;/p>
&lt;p>Await – This is where things get asynchronous. The await keyword allows the code to wait asynchronously for the long running code to complete.&lt;/p></description></item><item><title>How good is your SSL?</title><link>https://www.funkysi1701.com/posts/2017/how-good-is-your-ssl/</link><pubDate>Mon, 17 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/how-good-is-your-ssl/</guid><description>&lt;p>&lt;img class="img-fluid" alt="Troy Hunt SSL expert" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2017/07/Troy-Hunt-Profile-Photo.jpg?resize=150%2C150&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>I recently watched Troy Hunt’s &lt;a href="https://www.pluralsight.com/courses/https-every-developer-must-know" target="_blank" rel="noopener noreferrer">What Every Developer Must Know about HTTPS&lt;/a>
course on Pluralsight. Its very good and really make you think about SSL certificates and how to correctly implement them.&lt;/p>
&lt;p>One thing in particular Troy mentions is the website &lt;a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="noopener noreferrer">SSL Labs&lt;/a>
. This website allows you to test a websites implementation of SSL. A grade of A to F is assigned with A being the best and F being the worst.&lt;/p>
&lt;p>Troy Hunt has a &lt;a href="https://www.troyhunt.com/do-you-really-want-bank-grade-security/" target="_blank" rel="noopener noreferrer">blog&lt;/a>
post where he discusses how Australian Banks score. Lets look at a few UK banks.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bank&lt;/strong>&lt;/th>
&lt;th>&lt;strong>SSL Certificate&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Grade&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Home Page Under SSL&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>HSBC&lt;/td>
&lt;td>&lt;a href="http://www.hsbc.co.uk" target="_blank" rel="noopener noreferrer">www.hsbc.co.uk&lt;/a>
&lt;/td>
&lt;td>B&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nationwide&lt;/td>
&lt;td>onlinebanking.nationwide.co.uk&lt;/td>
&lt;td>C&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NatWest&lt;/td>
&lt;td>&lt;a href="http://www.nwolb.com" target="_blank" rel="noopener noreferrer">www.nwolb.com&lt;/a>
&lt;/td>
&lt;td>C&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Barclaycard&lt;/td>
&lt;td>&lt;a href="http://www.barclaycard.co.uk" target="_blank" rel="noopener noreferrer">www.barclaycard.co.uk&lt;/a>
&lt;/td>
&lt;td>A-&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Barclays&lt;/td>
&lt;td>bank.barclays.co.uk&lt;/td>
&lt;td>A-&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lloyds Bank&lt;/td>
&lt;td>&lt;a href="http://www.lloydsbank.com" target="_blank" rel="noopener noreferrer">www.lloydsbank.com&lt;/a>
&lt;/td>
&lt;td>A&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Royal Bank of Scotland&lt;/td>
&lt;td>&lt;a href="http://www.rbsdigital.com" target="_blank" rel="noopener noreferrer">www.rbsdigital.com&lt;/a>
&lt;/td>
&lt;td>C&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Standard Chartered&lt;/td>
&lt;td>&lt;a href="http://www.sc.com" target="_blank" rel="noopener noreferrer">www.sc.com&lt;/a>
&lt;/td>
&lt;td>C&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Virgin Money&lt;/td>
&lt;td>uk.virginmoney.com&lt;/td>
&lt;td>A+&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Santander&lt;/td>
&lt;td>retail.santander.co.uk&lt;/td>
&lt;td>A-&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>On the whole the ratings are all quite good with all being in the range A-C. However I have also indicated if they have SSL on the home page. Only 4 out 10 website listed above have the home page load under SSL.&lt;/p>
&lt;p>Why does this matter as long as the login is under SSL? Any page that loads over http is potentially at risk from a man in the middle attack. A fake malicious home page could contain links to any page and trick users into entering personal information.&lt;/p>
&lt;p>If you want to test a bank or other website not listed here. Go to &lt;a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="noopener noreferrer">https://www.ssllabs.com/ssltest/index.html&lt;/a>
and type the address that is on the SSL certificate in to the search. The good news is that this site scores a A.&lt;/p>
&lt;p>Troy mentions that there is rapid growth in the adoption of SSL, there is also rapid growth in improving ratings. One of these banks went from a C to an A during the course of writing this blog.&lt;/p></description></item><item><title>Writing your first test</title><link>https://www.funkysi1701.com/posts/2017/writing-your-first-test/</link><pubDate>Mon, 10 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/writing-your-first-test/</guid><description>&lt;p>Whenever I write a new test I have to think how best to do it. Hopefully I can summarise a few tips here to help get started.&lt;/p>
&lt;h3 id="arrange-act-assert">Arrange Act Assert&lt;a class="anchor ms-1" href="#arrange-act-assert">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>The first thing I think about when writing a test is Arrange, Act, Assert. Arrange, Act, Assert is a pattern for writing the tests.&lt;/p>
&lt;p>&lt;strong>Arrange&lt;/strong> – This gets things in order ready to execute the test.&lt;/p>
&lt;p>&lt;strong>Act&lt;/strong> – This executes the method you want to test.&lt;/p>
&lt;p>&lt;strong>Assert&lt;/strong> – This compares the value produced in the Act step with a known value typically with a method similar to the following&lt;/p>
&lt;p>Assert.AreEqual(expected value, actual value)&lt;/p>
&lt;p>Say for example you wanted to test a method called ReturnsTrue() which does nothing but returns a value of true. This method is in a class called ReturnsTrueClass&lt;/p>
&lt;p>The Arrange step in this example would be.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>ReturnsTrueClass t = &lt;span style="color:#66d9ef">new&lt;/span> ReturnsTrueClass();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Act step in this example would be.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> result = t.ReturnTrue();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Assert step in this example would be.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Assert.AreEqual(&lt;span style="color:#66d9ef">true&lt;/span>, result);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a stupidly simple example but hopefully you get the idea of how you can build all your tests with these three steps.&lt;/p>
&lt;p>Recently I saw a tweet complaining that someone has mixed up expected and actual in the Assert statement.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">There is a minor but special hell reserved for those who mix up the expected and actual parameters in Assert.Equals&lt;/p>&amp;mdash; Keith Williams (@zogface) &lt;a href="https://twitter.com/zogface/status/882737770095149056?ref_src=twsrc%5Etfw">July 5, 2017&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>At first glance this probably isn’t the worst mistake to make as if your tests are all passing actual and expected are the same.&lt;/p>
&lt;p>However tests will fail, that is the whole point of them, you can then fix bits of code. If you have mixed up actual and expected it adds extra time to debugging and figuring out what values are produced from your code and what you are expecting it to produce. It may be your test uses a mocking framework and somewhere in there, there is an issue, with mixed up expected/actual you may assume a problem in your code rather than the test.&lt;/p>
&lt;p>Also, how do you make such an error? When I type Assert.AreEquals() in Visual Studio, Visual Studio tells me what each parameter does, it takes a matter of seconds to do this, just by hovering over the code.&lt;/p>
&lt;p>One last tip to say about tests. Write your tests to test the behaviour of your application.&lt;/p></description></item><item><title>Uploading Files to AWS</title><link>https://www.funkysi1701.com/posts/2017/uploading-files-to-aws/</link><pubDate>Mon, 03 Jul 2017 20:00:45 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2017/uploading-files-to-aws/</guid><description>&lt;p>I am a fan of Azure but today I have been looking at AWS. Specifically how to upload and download files.&lt;/p>
&lt;p>AWS S3 stores files in Buckets. I already had an AWS S3 account setup with a Bucket. I am going to assume you have got a bucket setup and concentrate on the code to get files in and out.&lt;/p>
&lt;p>First step is to use nuget to install the AWS packages. In nuget the packages you want are called AWSSDK.Core and AWSSDK.S3.&lt;/p>
&lt;p>The using statements you want to use are called Amazon.S3 and Amazon.S3.Transfer, not sure why this doesn’t match nuget, this difference caught me out a couple of times.&lt;/p>
&lt;p>Now to the code that uploads files&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>AmazonS3Client AWSclient = &lt;span style="color:#66d9ef">new&lt;/span> AmazonS3Client(accessKeyID, secretAccessKeyID, Amazon.RegionEndpoint.EUWest1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TransferUtility fileTransferUtility = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtility(AWSclient);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> (FileStream streamWriter = &lt;span style="color:#66d9ef">new&lt;/span> FileStream(path, FileMode.Open))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TransferUtilityUploadRequest fileTransferUtilityRequest = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtilityUploadRequest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BucketName = &lt;span style="color:#e6db74">&amp;#34;flawlessimages&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InputStream = streamWriter,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Key = fileName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fileTransferUtility.Upload(fileTransferUtilityRequest);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lets break it down and look at what it does.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>AmazonS3Client AWSclient = &lt;span style="color:#66d9ef">new&lt;/span> AmazonS3Client(accessKeyID, secretAccessKeyID, Amazon.RegionEndpoint.EUWest1);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates an instance of AmazonS3Client, we are passing the Access Key and Secret Access Key both of which can be found from your Amazon S3 account My Security Credentials section. Amazon.RegionEndpoint.EUWest1 specifies the amazon data centres that your bucket is located in.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>TransferUtility fileTransferUtility = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtility(AWSclient);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates an instance of TransfterUtility using the AmazonS3Client instance we created in the previous step.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> (FileStream streamWriter = &lt;span style="color:#66d9ef">new&lt;/span> FileStream(path, FileMode.Open))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This opens up a filestream from a files path and specifies that the file should be opened.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>TransferUtilityUploadRequest fileTransferUtilityRequest = &lt;span style="color:#66d9ef">new&lt;/span> TransferUtilityUploadRequest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BucketName = &lt;span style="color:#e6db74">&amp;#34;flawlessimages&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InputStream = streamWriter,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Key = fileName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fileTransferUtility.Upload(fileTransferUtilityRequest);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This last step specifies which bucket to upload to, what input stream to upload and the Key to use. Key is just AWS way of referring to files, more commonly referred to as the filename.&lt;/p>
&lt;p>This is all you need to do to upload a file to your Bucket. The file will be located at &lt;a href="https://s3-eu-west-1.amazonaws.com/[bucketname]/[filename]" target="_blank" rel="noopener noreferrer">https://s3-eu-west-1.amazonaws.com/[bucketname]/[filename]&lt;/a>
, however by default it will not be downloadable until you set Read permission to everyone, once you do that anyone who has the link will be able to download your file.&lt;/p>
&lt;p>This is the same permission level as any file you have on your webserver, however AWS has a better way.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> (s3Client = &lt;span style="color:#66d9ef">new&lt;/span> AmazonS3Client(accessKeyID, secretAccessKeyID, Amazon.RegionEndpoint.USEast1))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GetPreSignedUrlRequest request1 = &lt;span style="color:#66d9ef">new&lt;/span> GetPreSignedUrlRequest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BucketName = bucketName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Key = filename,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Expires = DateTime.Now.AddMinutes(&lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlString = s3Client.GetPreSignedURL(request1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we are generating a url to download the file, but we are specifying that it is only valid for 5 minutes. This means that if you share the url it will only work for 5 minutes, after that AWS will give an access denied message.&lt;/p>
&lt;p>This is much better security than you have on a typical web server, and easy to implement, every time a user clicks on a download link you generate a new presigned url and send the download to the browser, as long as this process doesn’t take longer than 5 minutes the user will never know.&lt;/p></description></item></channel></rss>