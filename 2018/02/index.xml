<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2018-02 on Funky Si's Blog</title><link>https://www.funkysi1701.com/2018/02/</link><description>Recent content in 2018-02 on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 26 Feb 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/2018/02/index.xml" rel="self" type="application/rss+xml"/><item><title>Refactoring if statements</title><link>https://www.funkysi1701.com/posts/2018/refactoringifstatements/</link><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/refactoringifstatements/</guid><description>&lt;p>The code base I am working on contains a huge if block. By huge I mean 77 if statements one after the other, each if checks to see what page id you are on and loads different content. This is not easy to maintain and I want to refactor it.&lt;/p>
&lt;p>One option would be to replace the if statements with a switch block. However this is just as unmanageable as the huge if block. Lets look at a better option.&lt;/p>
&lt;p>&lt;strong>Polymorphism&lt;/strong> is where you create a base class and then create sub classes from it. In my case I created an interface IPage with a single method CreateContent.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">IPage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> CreatePageContent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and then create 77 classes for each page which implemented this single method.&lt;/p>
&lt;p>Now comes the fun bit how do I call the correct page class from my original code?&lt;/p>
&lt;p>I created a dictionary than maps page ids to the class names.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Dictionary&amp;lt;PageIds, Type&amp;gt; PageIdToClass = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;PageIds, Type&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PageIds.HomePage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(HomePage)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PageIds.ContactPage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(ContactPage)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//etc &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the one step I am not 100% happy with as I think it may be possible to remove or simplify this step.&lt;/p>
&lt;p>Now I have a way to map ids to classes I can write a class to do this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyPage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IPage &lt;span style="color:#ae81ff">_&lt;/span>repo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MyPage(&lt;span style="color:#66d9ef">int&lt;/span> pageId)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PageIds p = (PageIds)pageId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Type t = PageIdToClass[p];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConstructorInfo constructor = t.GetConstructor(&lt;span style="color:#66d9ef">new&lt;/span> Type[] { });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">_&lt;/span>repo = (IPage)constructor.Invoke(&lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Create()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">_&lt;/span>repo.CreatePageContent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So in my constructor I take the pageId and pass it to my dictionary to get which subclass to load. I then get its Constructor and invoke it.&lt;/p>
&lt;p>Now I can remove the huge if block and replace it with a single line of code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> page = &lt;span style="color:#66d9ef">new&lt;/span> MyPage(pageId);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On the face of it this change might look like a lot of work for not much gain as we started off with one file and now we have the original file, an interface, 77 subclasses and the MyPage class. However the original file is a lot more manageable and each sub class can be altered independently of each other.&lt;/p>
&lt;p>This is a big step towards making this code more maintainable, there is always more that can be done but that can wait for another day.&lt;/p></description></item><item><title>Chrome distrusts SSL Certificates</title><link>https://www.funkysi1701.com/posts/2018/ssl-distrusts/</link><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/ssl-distrusts/</guid><description>&lt;p>One of the websites I have been working on has been displaying an error in the console. The error reads as follows.&lt;/p>
&lt;pre tabindex="0">&lt;code>The SSL certificate used to load resources from https://example.com will be distrusted in M70. Once distrusted, users will be prevented from loading these resources. See https://g.co/chrome/symantecpkicerts for more information.
&lt;/code>&lt;/pre>&lt;p>But what does this mean? Well let’s start by looking at the &lt;a href="https://security.googleblog.com/2017/09/chromes-plan-to-distrust-symantec.html" target="_blank" rel="noopener noreferrer">link&lt;/a>
provided.&lt;/p>
&lt;p>In January 2017 it was revealed that Certificate Authorities run by Symantec which include Thawte, VeriSign, Equifax, GeoTrust, and RapidSSL had been issuing certificates that did not comply with baseline standards.&lt;/p>
&lt;p>Starting with Chrome 66, Google has decided to remove trust for these certificates. Chrome 66 is due for release around 17th April. My error mentions M70 so what does that refer to?&lt;/p>
&lt;p>Chrome 70 which is due to be released in October 2018 will removed the trust for another batch of Symantec certificates.&lt;/p>
&lt;p>If you are getting one of these errors because you are using a certificate that is going to be distrusted what will your site look like in Chrome 66 or Chrome 70?&lt;/p>
&lt;p>Well Chrome 66 is now in the dev channel so we can give it a try. &lt;img class="img-fluid" alt="" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2018/02/tempsnip.png.jpg?resize=662%2C443&amp;amp;ssl=1" loading="lazy"
/>
&lt;/p>
&lt;p>Not very nice for your users is it? Now is the time to order a new SSL certificate to avoid this happening to your site.&lt;/p>
&lt;p>I first saw this error a few months ago and have been reading up about it and waiting for Chrome 66 to reach the dev channel so I could test what it did to my site. However now that I have Chrome 66 installed I spotted the intranet for the company I work for is also affected. I do not directly work on the intranet so I notified the security team that they may want to look into this.&lt;/p>
&lt;p>Unfortunately the response I received has been that Google needs to fix this before Chrome 66 is released. I am not criticising my employer or the security team, however this isn’t something Google can just “ &lt;strong>fix&lt;/strong> “.&lt;/p>
&lt;p>The certificates issued were issued by a CA that had issues so in order to maintain the trustworthiness of all certificates Google had little choice but to distrust them. Google and security experts need to be making more of a fuss about this and I am joining in on making a fuss by writing this blog. &lt;a href="https://scotthelme.co.uk/are-you-ready-for-the-symantec-distrust/" target="_blank" rel="noopener noreferrer">Scott Helme&lt;/a>
estimates that there are about 7000 websites which may be affected by the M66 and M70 distrusts.&lt;/p></description></item><item><title>Content Security Policies</title><link>https://www.funkysi1701.com/posts/2018/content-security-policies/</link><pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/content-security-policies/</guid><description>&lt;p>A content Security Policy or CSP is a HTTP response header that defines what sources of content can be loaded on a web page. It is a way to combat Cross Site Scripting (XSS) attacks.&lt;/p>
&lt;h3 id="what-is-a-xss-attack-then">What is a XSS attack then?&lt;a class="anchor ms-1" href="#what-is-a-xss-attack-then">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>When you load a webpage it also loads various other resources like images, some css style sheets, various javascript files that you want to run and probably many other things.&lt;/p>
&lt;p>How do you know that you can trust all of these things? If you created them and they live under you control then the answer is probably yes. However these days you will probably want to use resources from across the internet, like youtube videos, google analytics, disqus comments, jquery libraries from a cdn etc and you can’t be sure exactly what they are doing.&lt;/p>
&lt;p>Imagine you had a page which you could add any text into a form which would then be displayed. A malicious user could add evil javascript or get the browser to load evil code from anywhere on the internet.&lt;/p>
&lt;h3 id="csp-to-the-rescue">CSP to the rescue!&lt;a class="anchor ms-1" href="#csp-to-the-rescue">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>A CSP allows the browser to only load from sources that you specify. You could specify that resources from your own site will load but the evil script will not.&lt;/p>
&lt;p>Let’s look at some examples&lt;/p>
&lt;pre tabindex="0">&lt;code>Content-Security-Policy: script-src &amp;#39;self&amp;#39;
&lt;/code>&lt;/pre>&lt;p>This allows &lt;code>&amp;lt;script&amp;gt;&lt;/code> tags to only load from the current webhost. script-src is not the only keyword you can use, let’s look at some of the others.&lt;/p>
&lt;p>&lt;strong>script-src&lt;/strong> – control what &lt;code>&amp;lt;script&amp;gt;&lt;/code> tags will load&lt;br>
&lt;strong>style-src&lt;/strong> – control what css will load&lt;br>
&lt;strong>img-src&lt;/strong> – control what images will load&lt;br>
&lt;strong>frame-src&lt;/strong> – control what frames will load&lt;br>
&lt;strong>font-src&lt;/strong> – control what fonts will load&lt;br>
&lt;strong>object-src&lt;/strong> – control what object tags will load&lt;br>
&lt;strong>connect-src&lt;/strong> – control what resources a script can connect to&lt;br>
&lt;strong>media-src&lt;/strong> – controls what media (audio/video) will load&lt;br>
&lt;strong>default-src&lt;/strong> – if no specific rule exists then the default directive will run&lt;/p>
&lt;pre tabindex="0">&lt;code>Content-Security-Policy: default-src https
&lt;/code>&lt;/pre>&lt;p>This allows any content to be loaded from any site as long as it comes from a secure (https) site&lt;/p>
&lt;pre tabindex="0">&lt;code>Content-Security-Policy: default-src https://example.com
&lt;/code>&lt;/pre>&lt;p>This allows any content to be loaded from &lt;a href="https://example.com" target="_blank" rel="noopener noreferrer">https://example.com&lt;/a>
only.&lt;/p>
&lt;h3 id="how-do-i-use-this-on-my-site">How do I use this on my site?&lt;a class="anchor ms-1" href="#how-do-i-use-this-on-my-site">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>I have added CSPs into my web.config which works great for my .Net Framework code.&lt;/p>
&lt;pre tabindex="0">&lt;code> &amp;lt;system.webServer&amp;gt; &amp;lt;httpProtocol&amp;gt; &amp;lt;customHeaders&amp;gt; &amp;lt;add name=&amp;#34;Content-Security-Policy&amp;#34; value=&amp;#34;default-src https://example.com&amp;#34; /&amp;gt; &amp;lt;/customHeaders&amp;gt; &amp;lt;/httpProtocol&amp;gt; &amp;lt;/system.webServer&amp;gt;
&lt;/code>&lt;/pre>&lt;p>For .net core it is a bit more complex as you don’t tend to use web.config files, however check out Anthony Chu’s &lt;a href="https://anthonychu.ca/post/aspnet-core-csp/" target="_blank" rel="noopener noreferrer">post&lt;/a>
, which has a solution to that problem.&lt;/p>
&lt;h3 id="report-only">Report Only&lt;a class="anchor ms-1" href="#report-only">&lt;i class="fas fa-link">&lt;/i>&lt;/a>&lt;/h3>
&lt;p>One last thing about CSPs to mention is the Report Only flag.&lt;/p>
&lt;pre tabindex="0">&lt;code>Content-Security-Policy-Report-Only
&lt;/code>&lt;/pre>&lt;p>This does the same as the above but doesn’t enforce anything, so you can fix any problems before you break anything.&lt;/p>
&lt;p>To view your issues just look in the developer tools in your favourite browser. Or you can configure all your reports to be collated in one place with a report-uri directive.&lt;/p>
&lt;pre tabindex="0">&lt;code>Content-Security-Policy: default-src https://example.com; report-uri https://example.report-uri.com/r/d/csp/reportOnly;
&lt;/code>&lt;/pre>&lt;p>Scott Helme and Troy Hunt have a site called &lt;a href="https://report-uri.com/" target="_blank" rel="noopener noreferrer">report-uri&lt;/a>
which offer a service for collating and viewing all your CSP violations so check it out if you want to know more about CSPs.&lt;/p></description></item></channel></rss>