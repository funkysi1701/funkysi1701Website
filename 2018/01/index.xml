<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2018-01 on Funky Si's Blog</title><link>https://www.funkysi1701.com/2018/01/</link><description>Recent content in 2018-01 on Funky Si's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 29 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.funkysi1701.com/2018/01/index.xml" rel="self" type="application/rss+xml"/><item><title>Flexible Architecture with Interfaces</title><link>https://www.funkysi1701.com/posts/2018/flexible-architecture/</link><pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/flexible-architecture/</guid><description>&lt;p>I have blogged a few times about &lt;a href="https://www.funkysi1701.com/posts/2017/interfaces/">interfaces&lt;/a>
, and how useful they are for producing good quality maintainable code. Let’s look at a problem and the solution I came up with which I am quite proud of.&lt;/p>
&lt;p>As previously mentioned I am in the process of moving &lt;a href="https://www.funkysi1701.com/2018/01/22/moving-blobs-cloud-suppliers/">images&lt;/a>
from AWS to Azure blob storage. Now that the actual files themselves have been moved I need to change the code that references them.&lt;/p>
&lt;p>Now I could find all the code that uses the AWS API and replace it with the Azure API but I am not very good at predicting the future, we may stay on Azure for a while, we may move to AWS or Google Cloud, or we may want to go back to files sitting on a server.&lt;/p>
&lt;p>Lets try and code a solution that is as flexible as possible. As you have probably guessed I am going to create an interface.&lt;/p>
&lt;p>At first I thought about creating an interface called &lt;strong>ICloudStorage&lt;/strong> , however this isn’t flexible enough as what happens if we go back to sticking files on a server so instead I created &lt;strong>IStorage&lt;/strong>.&lt;/p>
&lt;p>I created three classes that implemented IStorage, &lt;strong>AWSStorage&lt;/strong> , &lt;strong>AzureStorage&lt;/strong> and mostly for testing at the moment &lt;strong>FileStorage&lt;/strong>. I then created a class Storage that would call these three classes. Initially I created it like this&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> IStorage &lt;span style="color:#ae81ff">_&lt;/span>repo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Storage(IStorage repo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">_&lt;/span>repo = repo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However this would require I call it like Storage(new AzureStorage()) and I would need to know everywhere in my code which implementation I want to use. This isn’t too bad as when we change from AWS to Azure we would need to do a find and replace throughout the code and replace all AWSStorage and make them AzureStorage.&lt;/p>
&lt;p>However we can do better than that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Storage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> IStorage &lt;span style="color:#ae81ff">_&lt;/span>repo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Storage()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Type obj = Type.GetType(ConfigurationManager.AppSettings[&lt;span style="color:#e6db74">&amp;#34;DefaultStorageRepository&amp;#34;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConstructorInfo constructor = obj.GetConstructor(&lt;span style="color:#66d9ef">new&lt;/span> Type[] { });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">_&lt;/span>repo = (IStorage)constructor.Invoke(&lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will read from the web.config which implementation to use and that will decide which class to call. This means that to change from AWS to Azure we do not need to redeploy any code, all we need to do is change the web.config.&lt;/p>
&lt;p>Let’s look at the three lines and see if we can understand what is happening.&lt;/p>
&lt;p>&lt;strong>Type.GetType()&lt;/strong> looks straight forward and gets the type from the web.config&lt;/p>
&lt;p>&lt;strong>obj.GetConstructor()&lt;/strong> This gets the constructor for the type we have just found.&lt;/p>
&lt;p>&lt;strong>constructor.Invoke&lt;/strong> This then invokes the constructor and it then gets cast to the interface so can be used by the _repo variable.&lt;/p>
&lt;p>This is all fairly simple and makes sense, however it has produced some very flexible code and allows the code to be extended without recompiling.&lt;/p>
&lt;p>Let’s look at a hypothetical example. We want to add support for Google Cloud Storage. All we need to do is create a class library which implements the IStorage interface, place the compiled binary in the website and update the web.config to reference it. I haven’t tried this hypothetical example so it might be more complex than I think but in theory it should work.&lt;/p>
&lt;p>I am pretty excited at how flexible this code can be, hopefully I will use code like this more often now I understand it.&lt;/p></description></item><item><title>Moving files into blob storage</title><link>https://www.funkysi1701.com/posts/2018/moving-blobs-cloud-suppliers/</link><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/moving-blobs-cloud-suppliers/</guid><description>&lt;p>We are in the process of moving our companies websites onto the Azure platform. One of the challenges was to move image files out of the website project into blob storage. This week I have moved 150,000 of them.&lt;/p>
&lt;p>One thing I keep banging on about is that your source code should not contain data. If it does every time you do a deployment you need to consider where these images are located and ensure you don’t overwrite or loose any. It also goes without saying that deployments of a few Mb are a lot quicker than deployments of 100s of Mb.&lt;/p>
&lt;p>Azure blob storage also gives you advantages like distributing storage across multiple datacenters which would be impossible with traditional files on a server.&lt;/p>
&lt;p>So now that we have established that this is a good idea lets look at how we could move large amounts of data. In my case all the filenames are stored in a SQL database so the plan of action was to simply loop through the files in the database, download from current storage (either locally or other cloud storage), upload to Azure and tidy up afterwards. Due to the number of images I am going to update the database and mark when a file has been processed so I can do the move over several days.&lt;/p>
&lt;p>This is my code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> source = &lt;span style="color:#e6db74">&amp;#34;https://example.com/images/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> tmp = Server.MapPath(&lt;span style="color:#e6db74">&amp;#34;~/tmp/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (!Directory.Exists(tmp))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Directory.CreateDirectory(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> fixturePhotos = db.Images.Where(x =&amp;gt; x.Moved == &lt;span style="color:#66d9ef">null&lt;/span> || x.Moved == &lt;span style="color:#ae81ff">0&lt;/span>).Take(id);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> photo &lt;span style="color:#66d9ef">in&lt;/span> fixturePhotos)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">string&lt;/span> path = getFilePath(photo.FileName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!Directory.Exists(Server.MapPath(&lt;span style="color:#e6db74">&amp;#34;~/tmp/&amp;#34;&lt;/span> + path)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Directory.CreateDirectory(Server.MapPath(&lt;span style="color:#e6db74">&amp;#34;~/tmp/&amp;#34;&lt;/span> + path));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebClient WebClient = &lt;span style="color:#66d9ef">new&lt;/span> WebClient();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebClient.DownloadFile(source + photo.FileName, tmp + photo.FileName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileUploader f = &lt;span style="color:#66d9ef">new&lt;/span> FileUploader(tmp + photo.FileName, photo.FileName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.IO.File.Delete(tmp + photo.FileName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> photo.Moved = &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> photo.Moved = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db.SaveChanges();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (Directory.Exists(tmp))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Directory.Delete(tmp, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First of all I create a tmp folder in the root of my website if it doesn’t exist to store my images temporarily.&lt;/p>
&lt;p>I then use an entity framework model to query the database that haven’t been moved, and I use the take() method to limit how many results I process. (I have been passing in 1000 at a time)&lt;/p>
&lt;p>I then use a foreach loop over all these files to perform the following actions.&lt;/p>
&lt;ol>
&lt;li>Create additional subfolders if the filename variable stored in the database isn’t actually a filename but a filepath, note you will have to split filename and filepath which I haven’t included code for here.&lt;/li>
&lt;li>Download file from the original url and save into the temporary folder&lt;/li>
&lt;li>Upload to Azure&lt;/li>
&lt;li>Delete temporary file&lt;/li>
&lt;li>Update database giving a success or fail&lt;/li>
&lt;/ol>
&lt;p>Once the foreach is finished I commit the database changes and delete the temporary folder. I am sure there must be other ways to do this transfer but this was quick and easy to setup and now I have a copy of all the files in Azure storage so I can test out other issues with my website.&lt;/p>
&lt;p>One last tip about how to schedule this code. I called the above code from a MVC controller and then wrote a Azure Function to call this code on a schedule.&lt;/p></description></item><item><title>Website UI Testing</title><link>https://www.funkysi1701.com/posts/2018/website-ui-testing/</link><pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/website-ui-testing/</guid><description>&lt;p>Last week I looked at testing the &lt;a href="https://dev.to/funkysi1701/mobile-app-ui-testing-jgg-temp-slug-9433902" target="_blank" rel="noopener noreferrer">UI of mobile apps&lt;/a>
, this week lets look at how we could do a similar thing for websites.&lt;/p>
&lt;p>Testing the user interface is not an excuse for a lack of &lt;a href="https://dev.to/funkysi1701/writing-your-first-test-53gi-temp-slug-2645725" target="_blank" rel="noopener noreferrer">unit tests&lt;/a>
. Testing the user interface takes longer so for keep creating your small unit tests that can be run after ever build. That said lets look at how you create a UI test.&lt;/p>
&lt;p>Create a Unit Test project as normal. Now install the following nuget packages&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Selenium.WebDriver.ChromeDriverSelenium.WebDriverSelenium.WebDriver.PhantomJS.Xplatform
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I am going to be using Selenium to achieve my website testing and I am going to concentrate on the Chrome browser. However packages exist for other browsers so have a look at the following and I expect there are others as well.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Selenium.WebDriver.IEDriverSelenium.Firefox.WebDriver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="http://www.seleniumhq.org/" target="_blank" rel="noopener noreferrer">Selenium&lt;/a>
started life as a plugin for Firefox to help create automated tests, however the latest version of Firefox is not compatible with the plugin as I write this. I have not had to install any plugins or extensions to my browsers to achieve my testing.&lt;/p>
&lt;p>Enough talk lets write a test. First we create two instance variables to store the baseURL and the driver for the browser you are using.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> baseURL = &lt;span style="color:#e6db74">&amp;#34;https://www.example.com/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> RemoteWebDriver driver;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next we need to set things up for the test to run. This creates an instance of the chrome driver, maximizes the window and sets it to wait 30 seconds before timing out.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestInitialize()]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MyTestInitialize()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver = &lt;span style="color:#66d9ef">new&lt;/span> ChromeDriver();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Manage().Window.Maximize();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(&lt;span style="color:#ae81ff">30&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now comes the actual test. We navigate to a URL and then compare the title of the page loaded with a know value with a Assert statement like you would find in a unit test.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestMethod]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> CheckBrowserTitle()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Navigate().GoToUrl(&lt;span style="color:#66d9ef">this&lt;/span>.baseURL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.AreEqual(&lt;span style="color:#e6db74">&amp;#34;Home Page&amp;#34;&lt;/span>, driver.Title);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally we need to tidy up after ourselves.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestCleanup()]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> MyTestCleanup()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver.Quit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you are used to writing tests you will know that the are usually constructed in three sections Arrange, Act and Assert. The Arrange is done in the initialize method, which makes the actual test much simpler, the first line does the Act and the last line does the Assert.&lt;/p>
&lt;p>Now we have written a simple test lets look at something more complex.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>driver.FindElementByLinkTest(&lt;span style="color:#e6db74">&amp;#34;click&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This finds any Link on the page which is click. Be careful as the string need to be exactly what appears on screen it may well be easier to specify by id or class or something that doesn’t change as often. By adding .click() on the end of this command Selenium will click on the link and you can navigate to a new page.&lt;/p>
&lt;p>&lt;strong>What about submitting form data?&lt;/strong> Well you can find the element you want to fill in and add .SendKeys(&amp;ldquo;example text&amp;rdquo;) or .Submit() and this will fill in and submit form data.&lt;/p>
&lt;p>&lt;strong>What about a screenshot?&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Screenshot ss = driver.GetScreenshot();ss.SaveAsFile(&lt;span style="color:#e6db74">&amp;#34;test.jpg&amp;#34;&lt;/span>,System.Drawing.Imaging.ImageFormat.Jpeg);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have only just started playing around with web UI tests but you can see there is a fair bit you can do.&lt;/p></description></item><item><title>Mobile App UI Testing</title><link>https://www.funkysi1701.com/posts/2018/mobile-app-ui-testing/</link><pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.funkysi1701.com/posts/2018/mobile-app-ui-testing/</guid><description>&lt;p>Since I started creating an android app I have been writing simple UI tests.&lt;/p>
&lt;p>I have been taking advantage of the Visual Studio App Center which allows you to test against hundreds of different devices in the &lt;strong>Test Cloud&lt;/strong>.&lt;/p>
&lt;p>&lt;img class="img-fluid" alt="Xamarin UI tests" src="https://storageaccountblog9f5d.blob.core.windows.net/blazor/wp-content/uploads/2018/01/01-newproject-vs.png?resize=300%2C182&amp;amp;ssl=1" loading="lazy"
/>
In order to write a UI test create a UI Test App, this makes use of the nuget package Xamarin UI Test. By default you will now have a test called AppLaunches which will take a screenshot of you app after it starts.&lt;/p>
&lt;p>You can now run this test against any device from Visual Studio assuming you have it physically plugged into your machine. However, how do you run against the Test Cloud?&lt;/p>
&lt;p>To run against the Test Cloud you need to first install node.js. Now you can install the appcenter cli with the following command.&lt;/p>
&lt;pre tabindex="0">&lt;code>**npm** install -g appcenter-cli
&lt;/code>&lt;/pre>&lt;p>To run the tests in the Test Cloud run the following command&lt;/p>
&lt;pre tabindex="0">&lt;code>**appcenter** test run uitest --app &amp;#34;&amp;lt;username&amp;gt;/&amp;lt;appname&amp;gt;&amp;#34; --devices &amp;#34;&amp;lt;username&amp;gt;/&amp;lt;deviceset&amp;gt;&amp;#34; --app-path _pathToFile.apk_ --test-series &amp;#34;master&amp;#34; --locale &amp;#34;en_US&amp;#34; --build-dir _pathToUITestBuildDir_
&lt;/code>&lt;/pre>&lt;p>where &lt;username> is your appcenter username, is the name of your app in appcenter and is the group of apps you have created in app center to test against.&lt;/p>
&lt;p>Look at device sets in the test section of the appcenter and click the new device set button. You can then search for any device you like and add it to a set, as I write this there are 244 devices you can test against.&lt;/p>
&lt;p>It is currently not possible within app center to run tests against a new build, however if you build your app in VSTS as well you can create build or release step that runs it. As the Visual Studio app center is still under development I wouldn’t be surprised if it is added at some point.&lt;/p>
&lt;p>In VSTS look for Mobile Center Test in the definitions and you can specify the same variables as specified in the command line above.&lt;/p>
&lt;p>Now how do you actually write a useful UI test? I mentioned above you get a default test which contains the following code, this takes a screenshot of your app. However you don’t have to include this when using the Test Cloud as screenshots are included for free.&lt;/p>
&lt;pre tabindex="0">&lt;code>app.Screenshot(&amp;#34;First screen.&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>Lets look at what else is included in app&lt;/p>
&lt;pre tabindex="0">&lt;code>app.Repl();
&lt;/code>&lt;/pre>&lt;p>This starts an interactive REPL (Read-Eval-Print-Loop) which lets you explore what is on screen in your app and pauses execution. I don’t include this in my tests, however I do make use of it to explore what is on screen and what tests I might make use of.&lt;/p>
&lt;pre tabindex="0">&lt;code>app.Tap(c =&amp;gt; c.Marked(&amp;#34;Button&amp;#34;));
&lt;/code>&lt;/pre>&lt;p>This taps an element on screen called Button. There is also a method called TapCoordinates which would allow you to click anywhere you like.&lt;/p>
&lt;pre tabindex="0">&lt;code>app.WaitForElement(c =&amp;gt; c.Marked(&amp;#34;View&amp;#34;));
&lt;/code>&lt;/pre>&lt;p>After clicking a button you are probably going to want to wait for the app to load extra data or a new screen. The WaitForElement waits for an element to appear on screen. There are also methods that wait a period of time or wait until an element no longer exists.&lt;/p>
&lt;p>These are the main methods I have used so far, however there is an extensive list including methods for scrolling, swiping, pinching and adjusting the volume buttons. So you should be able to test all manner of app functionality and if you make use of the Test Clouds will know which devices are causing problems.&lt;/p></description></item></channel></rss>